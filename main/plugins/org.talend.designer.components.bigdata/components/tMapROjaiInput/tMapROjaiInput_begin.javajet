<%@ jet 
imports="
		java.util.List
		java.util.Map
		org.talend.core.model.process.ElementParameterParser	
		org.talend.core.model.process.INode
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		"
%>

	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/Log4jFileUtil.javajet"%>
	
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	boolean restrictPartialSorts = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"_RESTRICT_PARTIAL_SORTS_"));
	String table = ElementParameterParser.getValue(node, "__TABLE__");
  	List<? extends IConnection> outputs = node.getOutgoingSortedConnections();
	IConnection outConn = null;
	IMetadataTable metadata = null;
  	String firstConnName = "";
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));

	if(outputs!=null && outputs.size()> 0) {
		outConn = outputs.get(0);

		if(outConn!=null && outConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
			firstConnName = outConn.getName();
			metadata = outConn.getMetadataTable();
		}
	}

  	List<IMetadataColumn> columnList = null;
    String query = ElementParameterParser.getValue(node,"__QUERY__");
  	List<Map<String, String>> mapping = (List<Map<String,String>>)ElementParameterParser.getObjectValueXML(node, "__MAPPING__");
    query = query.replaceAll("\n","");
    query = query.replaceAll("\r","");
	log4jFileUtil.componentStartInfo(node);
%>

  	log.info("Query: " + <%=query%>);
	com.mapr.db.Table table_<%=cid %> = null;
	log.info("Inside job. Query : " + <%=query %>);
    int nb_line_<%=cid %> = 0;

	org.ojai.store.Connection conn_<%=cid %> = org.ojai.store.DriverManager.getConnection("ojai:mapr:");
	org.ojai.store.DocumentStore store_<%=cid %> = conn_<%=cid %>.getStore(<%=table %>);
  	//org.ojai.store.Query qry_<%=cid %> = conn_<%=cid %>.newQuery(<%=query %>);
  	  	
  	//if (<%=restrictPartialSorts %>) {
  		//qry_<%=cid %>.setOption("ojai.mapr.query.force-noncovering-sort", "TRUE");
  	//}
  	  	
  	org.ojai.DocumentStream rst_<%=cid %> = store_<%=cid %>.find();//Query(qry_<%=cid %>);
  	java.util.Iterator<org.ojai.Document> itrst_<%=cid %> = rst_<%=cid %>.iterator();
    org.ojai.Document readRecord_<%=cid %>;
	java.util.Map<String, String> pathMap_<%=cid%> = new java.util.HashMap<String, String>();

<%
	for (Map<String, String> pathElement : mapping) {
		String path = pathElement.get("PARENT_NODE_PATH");

		if (path == null || "".equals(path)) {
			path = "\"\"";
		}
		
		String schemaColumn = pathElement.get("SCHEMA_COLUMN");
%>
	pathMap_<%=cid%>.put("<%=schemaColumn%>",<%=path%>);
<%
	}
%>

    while (itrst_<%=cid %>.hasNext()) {
		nb_line_<%=cid %> ++;
       	readRecord_<%=cid %> = itrst_<%=cid %>.next();
       	log.info("Readed record: " + readRecord_<%=cid %>);
		org.ojai.Value valueObj_<%=cid %> = null;

<%
      	columnList = metadata.getListColumns();
       	int sizeColumns = columnList.size();

		if (firstConnName.length() > 0) {

			for (IMetadataColumn column : columnList) { //int i = 0; i < sizeColumns; i++) {
				//IMetadataColumn column = columnList.get(i);
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
				JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
				String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
%>

        valueObj_<%=cid%> = readRecord_<%=cid%>.getValue(pathMap_<%=cid%>.get("<%=column.getLabel() %>"));

<%
       			if (javaType == JavaTypesManager.OBJECT) {
%>

		<%=firstConnName %>.<%=column.getLabel() %> = valueObj_<%=cid%> == null ? null : valueObj_<%=cid%>.getObject();
		
<%
          		} else {
%>

		if(valueObj_<%=cid%> != null) {
		
<%
					if(javaType == JavaTypesManager.DATE) {
%>

			<%=firstConnName %>.<%=column.getLabel() %> = valueObj_<%=cid%>.getDate().toDate();
            
<%
					} else if(javaType == JavaTypesManager.BYTE_ARRAY) {
%>

			<%=firstConnName %>.<%=column.getLabel() %> = valueObj_<%=cid%>.getBinary().array();
			
<%
					} else if (javaType == JavaTypesManager.STRING) {
%>

			<%=firstConnName %>.<%=column.getLabel() %> = valueObj_<%=cid%>.toString();
			
<%
					} else if (javaType == JavaTypesManager.INTEGER) {
%>

           	<%=firstConnName %>.<%=column.getLabel() %> = valueObj_<%=cid%>.getInt();
            
<%
                   } else if (javaType == JavaTypesManager.LONG) {
%>

           	<%=firstConnName %>.<%=column.getLabel() %> = valueObj_<%=cid%>.getLong();
            
<%
                   } else if (javaType == JavaTypesManager.SHORT){
%>

           	<%=firstConnName %>.<%=column.getLabel() %> = valueObj_<%=cid%>.getShort();
            
<%
                   } else {
%>

            <%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate %>(valueObj_<%=cid%>.toString());
            
<%
				   }
%>

		} else {
			<%=firstConnName %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
		}
<%
				}
			}
		}
%>
		