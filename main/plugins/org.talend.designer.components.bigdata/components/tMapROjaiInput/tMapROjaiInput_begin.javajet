<%@ jet 
imports="
		java.util.List
		java.util.Map
		org.talend.core.model.process.ElementParameterParser	
		org.talend.core.model.process.INode
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		"
%>

	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/Log4jFileUtil.javajet"%>
	
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
	boolean restrictPartialSorts = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"_RESTRICT_PARTIAL_SORTS_"));
	
	String table = ElementParameterParser.getValue(node, "__TABLE__");
  	List<? extends IConnection> outputs = node.getOutgoingSortedConnections();
	IConnection outConn = null;
	IMetadataTable metadata = null;
  	String firstConnName = "";

	if(outputs!=null && outputs.size()> 0) {
		outConn = outputs.get(0);

		if(outConn!=null && outConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
			firstConnName = outConn.getName();
			metadata = outConn.getMetadataTable();
		}
	}

  	List<IMetadataColumn> columnList = null;
    String query = ElementParameterParser.getValue(node,"__QUERY__");
  	List<Map<String, String>> mapping = (List<Map<String,String>>)ElementParameterParser.getObjectValueXML(node, "__MAPPING__");
    query = query.replaceAll("\n","");
    query = query.replaceAll("\r","");
	log4jFileUtil.componentStartInfo(node);
%>

org.apache.hadoop.conf.Configuration conn_<%=cid %> = null;
com.mapr.db.Table table_<%=cid %> = null;
<%
//INode connNode = "true".equals(useExistingConn) ? ElementParameterParser.getLinkedNodeValue(node, "__CONNECTION__") : node;
// use existing connection
	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	String conn = "conn_" + connection;
%>
	conn_<%=cid %> = (org.apache.hadoop.conf.Configuration)globalMap.get("<%=conn %>");
	//OJAIConnection ojaiCon_<%=cid %> = (OJAIConnection)globalMap.get(ojai_"<%=conn %>");//tOJAIConnection should put connection object here
	
	if(conn_<%=cid %> == null){
		throw new RuntimeException("<%=cid %>'s connection is null!");
	}

  	  	//org.ojai.store.Query qry_<%=cid %> = ojaiConn_<%=cid %>.newQuery(<%=query %>);//won't work until oji connection is not realized
  	  	
  	  	if (<%=restrictPartialSorts %>) {
  	  		//qry_<%=cid %>.setOption("ojai.mapr.query.force-noncovering-sort", "TRUE");
  	  	}
  	  	
  	    table_<%=cid%> = com.mapr.db.MapRDB.getTable(<%=table %>);
  	    org.ojai.DocumentStream rst_<%=cid %> = table_<%=cid %>.findQuery(<%=query %>);//qry_<%=cid %>);
  	    java.util.Iterator<org.ojai.Document> itrst_<%=cid %> = rst_<%=cid %>.iterator();
        org.ojai.Document readRecord_<%=cid %>;

		class DBObjectInputUtil_<%=cid%> {
			// Get the node value in embedded document, 
			//If have no embedded document get root document node.
			
			public Object getValue(String parentNode,String currentName, org.ojai.Document dbObject) {
				Object value=null;
				
				if(dbObject==null) {
					return null;
				}
				
				if (parentNode == null || "".equals(parentNode)) {
				    if ("*".equals(currentName)) {
				        value = dbObject;
				    } else if (dbObject.get(currentName)!=null) {
						value=dbObject.get(currentName);
					}
				} else {
					String objNames[] = objNames = parentNode.split("\\.");
					org.ojai.Document currentObj=dbObject;
					
					for(int i=0;i<objNames.length;i++) {
						currentObj=(org.ojai.Document)currentObj.get(objNames[i]);
						
						if(currentObj==null) {
							break;
						}
					}
					
					if ("*".equals(currentName)) {
                        value = currentObj;
                    } else if(currentObj!=null) {
						value=currentObj.get(currentName);
					}
				}
				
				return value;
			}
		}

		DBObjectInputUtil_<%=cid%> dbObjectInputUtil_<%=cid%>=new DBObjectInputUtil_<%=cid%>();
        
        while (itrst_<%=cid %>.hasNext()) {
<%
          	columnList = metadata.getListColumns();
          	int sizeColumns = columnList.size();
%>
          	readRecord_<%=cid %> = itrst_<%=cid %>.next();

<%
			if(firstConnName.length()>0){
%>
				Object valueObj_<%=cid %>=null;
<%
				for (int i = 0; i < sizeColumns; i++) {
					IMetadataColumn column = columnList.get(i);
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
%>
                    valueObj_<%=cid%> = dbObjectInputUtil_<%=cid%>.getValue(pathMap_<%=cid%>.get("<%=column.getLabel() %>"),"<%=column.getOriginalDbColumnName() %>", readRecord_<%=cid%>);
<%
          			if(javaType == JavaTypesManager.OBJECT) {
%>
					<%=firstConnName %>.<%=column.getLabel() %> = valueObj_<%=cid%>;
<%
          			} else {
%>
						if(valueObj_<%=cid%>!=null && valueObj_<%=cid%>.toString().length() > 0) {
<%
							if(javaType == JavaTypesManager.DATE) {
%>
                            	if (valueObj_<%=cid%> instanceof java.util.Date) {
									<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date((java.util.Date)valueObj_<%=cid%>, <%= patternValue %>);
                            	} else {
                                	<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date((String)valueObj_<%=cid%>, <%= patternValue %>);
                            	}
<%
							} else if(javaType == JavaTypesManager.BYTE_ARRAY) {
%>
								<%=firstConnName %>.<%=column.getLabel() %> = java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap((byte[])valueObj_<%=cid%>)).toString().getBytes(utf8Charset);
<%
							} else if(javaType == JavaTypesManager.STRING) {
%>
								<%=firstConnName %>.<%=column.getLabel() %> = valueObj_<%=cid%>.toString();
<%
							} else if (javaType == JavaTypesManager.INTEGER) {
%>
                            	if (valueObj_<%=cid%>.getClass().equals(Double.class)) {
                                	<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Double(valueObj_<%=cid%>.toString()).intValue();
                            	} else {
                                	<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate %>(valueObj_<%=cid%>.toString());
                            	}
<%
                        	} else if (javaType == JavaTypesManager.LONG) {
%>
                            	if (valueObj_<%=cid%>.getClass().equals(Double.class)) {
                                	<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Double(valueObj_<%=cid%>.toString()).longValue();
                            	} else {
                                	<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate %>(valueObj_<%=cid%>.toString());
                            	}
<%
                        	} else if (javaType == JavaTypesManager.SHORT){
%>
                            	if (valueObj_<%=cid%>.getClass().equals(Double.class)) {
                                	<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Double(valueObj_<%=cid%>.toString()).shortValue();
                            	} else {
	                                <%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate %>(valueObj_<%=cid%>.toString());
                            	}
<%
                        	} else {
%>
                            	<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate %>(valueObj_<%=cid%>.toString());
<%
							}
%>
						} else {
							<%=firstConnName %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
						}
<%
          			}
				}
			}
		}
	}
%>
		