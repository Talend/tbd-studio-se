<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.Map
	" 
%>

	int nb_line_<%=cid %> = 0;
	<%
    List<IMetadataTable> metadatas = node.getMetadataList();
  	if(metadatas != null && metadatas.size() > 0){
      	IMetadataTable metadata = metadatas.get(0);
      	if(metadata != null) {
		%>

			<%@ include file="@{org.talend.designer.components.bigdata}/components/templates/MongoDB/DBObjectUtil_below_3_5_X.javajet"%>

			DBObjectUtil_<%=cid%> updateObjectUtil_<%=cid%>=new DBObjectUtil_<%=cid%>();
			DBObjectUtil_<%=cid%> queryObjectUtil_<%=cid%>=new DBObjectUtil_<%=cid%>();
			java.util.Map<String, String> pathMap_<%=cid%>=new java.util.HashMap<String, String>();
			com.mongodb.Mongo mongo_<%=cid%>=null;
			com.mongodb.DB db_<%=cid%> =null;
			<%
			for (int i=0;i<mapping.size();i++) {
				String path = mapping.get(i).get("PARENT_NODE_PATH");
				if(path==null || "".equals(path)){
					path="\"\"";
				}
				String schemaColumn=mapping.get(i).get("SCHEMA_COLUMN");

				%>
				pathMap_<%=cid%>.put("<%=schemaColumn%>",<%=path%>);
				<%
			}
      		if (useExistingConnection){
      			String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
				%>
				mongo_<%=cid%>=(com.mongodb.Mongo)globalMap.get("mongo_<%=connection%>");
				db_<%=cid%> = (com.mongodb.DB) globalMap.get("db_<%=connection%>");
				<%
				if(isLog4jEnabled){
				%>	
					log.info("<%=cid%> - Get an existing client from " + "<%=connection%>" + ".");
					log.info("<%=cid%> - Get an existing DB from " + "<%=connection%>" + ".");
				<%
				}
			}else{

	 		    String mongoDbDriver = "com.mongodb.MongoClient";

	 		    %>
				<%@ include file="../templates/CosmosDB/ApplicationName.javajet"%>
	 		    // Empty client options
                com.mongodb.MongoClientOptions clientOptions_<%=cid%> = new com.mongodb.MongoClientOptions.Builder().applicationName(applicationName_<%=cid %>).build();
                <%
                if (useSSL) {
                    %>
                    clientOptions_<%=cid%> = new com.mongodb.MongoClientOptions.Builder().applicationName(applicationName_<%=cid %>)
                    .socketFactory(javax.net.ssl.SSLSocketFactory.getDefault())
                    .build();
                    <%
                }
                
                // Client Credentials
                %>
                // Empty client credentials list
                java.util.List<com.mongodb.MongoCredential> mongoCredentialList_<%=cid%> = new java.util.ArrayList<com.mongodb.MongoCredential>();

                <%
                // Authentication
                if (authentication){
                    %>
                    com.mongodb.MongoCredential mongoCredential_<%=cid%>;
                    <%
                    if((authenticationMechanism.equals("NEGOTIATE_MEC"))||(authenticationMechanism.equals("PLAIN_MEC"))||(authenticationMechanism.equals("SCRAMSHA1_MEC"))){
                        String passwordFieldName = "__PASSWORD__";
                        %>
                        <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
                        <%
                        if(authenticationMechanism.equals("NEGOTIATE_MEC")){
%>
                    			mongoCredential_<%=cid%> = com.mongodb.MongoCredential.createCredential(<%=dbuser%>, <%=usedAuthenticationDB%>, new String(decryptedPassword_<%=cid%>).toCharArray());
<%                    
                        } else if(authenticationMechanism.equals("PLAIN_MEC")){
                            %>
                            mongoCredential_<%=cid%> = com.mongodb.MongoCredential.createPlainCredential(<%=dbuser%>, "$external", new String(decryptedPassword_<%=cid%>).toCharArray());
                            <%
                        } else if(authenticationMechanism.equals("SCRAMSHA1_MEC")){
                            %>
                            mongoCredential_<%=cid%> = com.mongodb.MongoCredential.createScramSha1Credential(<%=dbuser%>, <%=usedAuthenticationDB%>, new String(decryptedPassword_<%=cid%>).toCharArray());
                            <%
                        }
                    } else { // GSSAPI SASL (KERBEROS)
                        %>
                        System.setProperty("java.security.krb5.realm", <%=krbRealm%>);
                        System.setProperty("java.security.krb5.kdc", <%=krbKdc%>);
                        System.setProperty("javax.security.auth.useSubjectCredsOnly", "false");
                        mongoCredential_<%=cid%> = com.mongodb.MongoCredential.createGSSAPICredential(<%=krbUserPrincipal%>);
                        <%
                    }
                    %>
                    mongoCredentialList_<%=cid%>.add(mongoCredential_<%=cid%>);
                    <%
                }

                // the client
                if(useReplicaSet){
                    %>
                    List<com.mongodb.ServerAddress> addrs_<%=cid%> = new java.util.ArrayList<com.mongodb.ServerAddress>();
                    <%
                    for(Map<String,String> replicaAddr:replicaAddrs){
                    %>
                        addrs_<%=cid%>.add(new com.mongodb.ServerAddress(<%=replicaAddr.get("REPLICA_HOST")%>,<%=replicaAddr.get("REPLICA_PORT")%>));
                    <%
                    }
                    %>
                    mongo_<%=cid%> = new <%=mongoDbDriver%>(addrs_<%=cid%>, mongoCredentialList_<%=cid%>, clientOptions_<%=cid%>);
                    <%
                }else{
                    %>
                    com.mongodb.ServerAddress serverAddress_<%=cid%> = new com.mongodb.ServerAddress(<%=dbhost%>, <%=dbport%>);
                    mongo_<%=cid%> = new <%=mongoDbDriver%>(serverAddress_<%=cid%>, mongoCredentialList_<%=cid%>, clientOptions_<%=cid%>);
                    <%
                }
                %>
				resourceMap.put("mongo_<%=cid%>", mongo_<%=cid%>);
				db_<%=cid%> = mongo_<%=cid%>.getDB(<%=dbname%>);
				<%

			}

			if(setWriteConcern){
				%>
				mongo_<%=cid%>.setWriteConcern(com.mongodb.WriteConcern.<%=writeConcern%>);
				<%
			}

			if(queryOptionNoTimeOut && !useExistingConnection){
		        %>
		        mongo_<%=cid%>.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
		        <%
    		}

			%>
			<%
			if(isLog4jEnabled){
			%>	
				log.info("<%=cid%> - Connecting to " + mongo_<%=cid%>.getServerAddressList() + ".");
			<%
			}
			if(dropExistCollection){
			%>
					db_<%=cid%>.getCollection(<%=collection%>).drop();
			<%
			}
			%>
			com.mongodb.DBCollection coll_<%=cid%> = db_<%=cid%>.getCollection(<%=collection%>);
			<%

			// BulkWrite
			if(bulkWrite){
			%>
				com.mongodb.BulkWriteOperation bulkWriteOperation_<%=cid%> = coll_<%=cid%>.initialize<%=bulkWriteType%>BulkOperation();
				int bulkWriteOperationCounter_<%=cid%> = 1;
				int bulkWriteOperationSize_<%=cid%> = Integer.parseInt(<%=bulkWriteOperationSize%>);
				<%
			}

			if (isLog4jEnabled) {
			%>
				log.info("<%=cid%> - Start to write data into database [" + db_<%=cid%>.getName() + "].");
			<%
			}
    	}
    }
	%>