<%@ jet
	imports="
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.IMetadataColumn
        java.util.List
        java.util.Map
        java.util.Set
        java.util.HashSet
        java.util.HashMap
	    org.talend.core.model.metadata.types.JavaTypesManager
	    org.talend.core.model.metadata.types.JavaType
"
%>
<%
	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	String dataNode = ElementParameterParser.getValue(node,"__DATA_NODE__");
	String queryNode = ElementParameterParser.getValue(node,"__QUERY_NODE__");
	boolean dieOnError = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));

    boolean setBulkWrite = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__SET_BULK_WRITE__"));
    String bulkWriteOperationSize = ElementParameterParser.getValue(node, "__BULK_WRITE_SIZE__");
    boolean bulkWriteType = "Ordered".equalsIgnoreCase(ElementParameterParser.getValue(node, "__BULK_WRITE_TYPE__"));
    boolean removeRoot = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__REMOVE_ROOT__"));
    Set<Map<String, String>> rootTable = new HashSet(
        (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ROOT__"));
    Set<Map<String, String>> loopTable = new HashSet(
        (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__LOOP__"));
    List<Map<String, String>> groupTable = 
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUP__");

    // BulkWrite is only supportted on Mongo 2.6+ drivers
    final boolean bulkWrite = setBulkWrite;
    boolean updateAll = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__UPDATE_ALL__"));
    boolean deleteAll = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__DELETE_ALL__"));
    List<IMetadataTable> metadatas = node.getMetadataList();
  	if(metadatas != null && metadatas.size() > 0){
      	IMetadataTable metadata = metadatas.get(0);
      	if(metadata != null){
			if(isLog4jEnabled){
			%>
				log.info("<%=cid%> - Trying to parse a json string.");
				log.debug("<%=cid%> - The JSON string:"+json_<%=cid%>.toString());
			<%
			}
			%>
			final String jsonSerialize_<%= cid %> = json_<%=cid%>.toString()
			     .replace("__DOLLAR__", "$"); // to manage $oid (and all mongo db extended json) on mongo db side.
			org.bson.Document data_<%=cid%>=org.bson.Document.parse(jsonSerialize_<%= cid %>);
			<%
			if(isLog4jEnabled){
			%>
				log.info("<%=cid%> - Parsed Successfully.");
			<%
			}
			%>

			// Replace Date and Bytes by true mongoDB types.
            Object <%=cid%>_dbobject = data_<%=cid%>;
            String pathString_<%=cid%> = "";
            String[] path_<%=cid%>;            
			<%
            boolean valuesBySamePathContainsDifferentDatePatterns = false;
            Map<String, String> alreadyProcessedPaths = new HashMap<String, String>();
            //key   - path to data
            //value - date pattern

            for (IMetadataColumn column: metadata.getListColumns()) {
                JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
                if ((javaType == JavaTypesManager.DATE) || (javaType == JavaTypesManager.BYTE_ARRAY)) {
                    for (Map<String, String> root: rootTable) {
                        if (root.get("COLUMN").equals(column.getLabel()) && alreadyProcessedPaths.containsKey(root.get("PATH")) && !alreadyProcessedPaths.get(root.get("PATH")).equalsIgnoreCase(column.getPattern())){
                            valuesBySamePathContainsDifferentDatePatterns = true;                        
                        }
                        if (root.get("COLUMN").equals(column.getLabel()) && !alreadyProcessedPaths.containsKey(root.get("PATH"))) {
                            %>
                            // root
                            <%=cid%>_dbobject = (org.bson.Document) data_<%=cid%>;
                            <%
                            alreadyProcessedPaths.put(root.get("PATH"), column.getPattern());
                            %>
                            pathString_<%=cid%> = "<%=root.get("PATH")%>";
                            <%
                            if (removeRoot) {
                                %>
                                pathString_<%=cid%> = pathString_<%=cid%>.substring(pathString_<%=cid%>.indexOf("/") + 1);
                                <%
                            }
                            %>
                            path_<%=cid%> = pathString_<%=cid%>.split("/");
                            <%
                            if (javaType == JavaTypesManager.DATE) {
                                %>
                                mongoDBTreeConverter_<%=cid%>.processTree(<%=cid%>_dbobject, path_<%=cid%>, <%=column.getPattern()%>);
                                <%
                            } else { // Byte Array
                                %>
                                mongoDBTreeConverter_<%=cid%>.processTree(<%=cid%>_dbobject, path_<%=cid%>, null);
                                <%
                            }
                            // note: we cannot break here, they may be multiple values
                        }
                    }

                    for (Map<String, String> loop: loopTable) {
                        if (loop.get("COLUMN").equals(column.getLabel()) && alreadyProcessedPaths.containsKey(loop.get("PATH")) && !alreadyProcessedPaths.get(loop.get("PATH")).equalsIgnoreCase(column.getPattern())){
                            valuesBySamePathContainsDifferentDatePatterns = true;                      
                        }
                        if (loop.get("COLUMN").equals(column.getLabel()) && !alreadyProcessedPaths.containsKey(loop.get("PATH"))) {
                            %>
                            // loop
                            <%=cid%>_dbobject = (org.bson.Document) data_<%=cid%>;
                            <%
                            alreadyProcessedPaths.put(loop.get("PATH"), column.getPattern());
                            %>
                            pathString_<%=cid%> = "<%=loop.get("PATH")%>";
                            <%
                            if (removeRoot) {
                                %>
                                pathString_<%=cid%> = pathString_<%=cid%>.substring(pathString_<%=cid%>.indexOf("/") + 1);
                                <%
                            }
                            %>
                            path_<%=cid%> = pathString_<%=cid%>.split("/");
                            <%
                            if (javaType == JavaTypesManager.DATE) {
                                %>
                                mongoDBTreeConverter_<%=cid%>.processTree(<%=cid%>_dbobject, path_<%=cid%>, <%=column.getPattern()%>);
                                <%
                            } else { // Byte Array
                                %>
                                mongoDBTreeConverter_<%=cid%>.processTree(<%=cid%>_dbobject, path_<%=cid%>, null);
                                <%
                            }
                            // note: we cannot break here, they may be multiple values
                        }
                    }

                    for (Map<String, String> group: groupTable) {
                        if (group.get("COLUMN").equals(column.getLabel()) && alreadyProcessedPaths.containsKey(group.get("PATH")) && !alreadyProcessedPaths.get(group.get("PATH")).equalsIgnoreCase(column.getPattern())){
                            valuesBySamePathContainsDifferentDatePatterns = true;                        
                        }
                        if (group.get("COLUMN").equals(column.getLabel()) && !alreadyProcessedPaths.containsKey(group.get("PATH"))) {
                            %>
                            // group
                            <%=cid%>_dbobject = (org.bson.Document) data_<%=cid%>;
                            <%
                            alreadyProcessedPaths.put(group.get("PATH"), column.getPattern());
                            %>
                            pathString_<%=cid%> = "<%=group.get("PATH")%>";
                            <%
                            if (removeRoot) {
                                %>
                                pathString_<%=cid%> = pathString_<%=cid%>.substring(pathString_<%=cid%>.indexOf("/") + 1);
                                <%
                            }
                            %>
                            path_<%=cid%> = pathString_<%=cid%>.split("/");
                            <%
                            if (javaType == JavaTypesManager.DATE) {
                                %>
                                mongoDBTreeConverter_<%=cid%>.processTree(<%=cid%>_dbobject, path_<%=cid%>, <%=column.getPattern()%>);
                                <%
                            } else { // Byte Array
                                %>
                                mongoDBTreeConverter_<%=cid%>.processTree(<%=cid%>_dbobject, path_<%=cid%>, null);
                                <%
                            }
                            // note: we cannot break here, they may be multiple values
                        }
                    }
                    %>
                    if (<%=valuesBySamePathContainsDifferentDatePatterns%>){
                                throw new Exception("Values by same path can't have different date patterns.");
                    }
                    <%
                }
            }
			%>
			
			org.bson.Document queryObj_<%=cid%>=null;
			if(data_<%=cid%>!=null){
				<%
				if("Insert".equalsIgnoreCase(dataAction)){
					// Bulk Writes
					if(bulkWrite){
						// Add inserts untill bulksize is reached then execute and re-initialze the bulk operation
						%>
						if(bulkWriteOperationCounter_<%=cid%> < bulkWriteOperationSize_<%=cid%>){
							bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.InsertOneModel<org.bson.Document>(data_<%=cid%>));
							bulkWriteOperationCounter_<%=cid%>++;
						} else {
                            bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.InsertOneModel<org.bson.Document>(data_<%=cid%>));
							coll_<%=cid%>.bulkWrite(bulkWriteOperation_<%=cid%>, new com.mongodb.client.model.BulkWriteOptions().ordered(<%=bulkWriteType%>));
							bulkWriteOperationCounter_<%=cid%>=1;
							bulkWriteOperation_<%=cid%> = new java.util.ArrayList<>();
						}
						<%
					// Single Writes
					}else{
					%>
						coll_<%=cid%>.insertOne(data_<%=cid%>);
					<%
					}
				// Other operations (UPDATE, UPSERT, DELETE)
				}else if("DELETE".equalsIgnoreCase(dataAction)){
				// Bulk Delete
					if(bulkWrite){
						%>
								if(bulkWriteOperationCounter_<%=cid%> < bulkWriteOperationSize_<%=cid%>){
									bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.DeleteOneModel<org.bson.Document>(data_<%=cid%>));
									bulkWriteOperationCounter_<%=cid%>++;
								}else{
								    bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.DeleteOneModel<org.bson.Document>(data_<%=cid%>));
									coll_<%=cid%>.bulkWrite(bulkWriteOperation_<%=cid%>);
									bulkWriteOperationCounter_<%=cid%>=1;
									bulkWriteOperation_<%=cid%> = new java.util.ArrayList<>();
								}
						<%
					} else {
						if(deleteAll) {%>
							coll_<%=cid%>.deleteMany(data_<%=cid%>);
							<%
						} else {%>
							coll_<%=cid%>.deleteOne(data_<%=cid%>);
							<%
						}
					}
				}else{
				%>
					queryObj_<%=cid%> = (org.bson.Document) data_<%=cid%>.get(<%=queryNode%>);
					data_<%=cid%> = (org.bson.Document) data_<%=cid%>.get(<%=dataNode%>);
					if(data_<%=cid%>!=null && queryObj_<%=cid%>!=null){
						<%
						if("UPDATE".equalsIgnoreCase(dataAction)){
	                        // Bulk Updates
                            if(bulkWrite){
                                %>
                                if(bulkWriteOperationCounter_<%=cid%> < bulkWriteOperationSize_<%=cid%>){
                                    bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.ReplaceOneModel<org.bson.Document>(queryObj_<%=cid%>,data_<%=cid%>));
                                    bulkWriteOperationCounter_<%=cid%>++;
                                }else{
                                    bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.ReplaceOneModel<org.bson.Document>(queryObj_<%=cid%>,data_<%=cid%>));
                                    coll_<%=cid%>.bulkWrite(bulkWriteOperation_<%=cid%>, new com.mongodb.client.model.BulkWriteOptions().ordered(<%=bulkWriteType%>));
                                    bulkWriteOperationCounter_<%=cid%>=1;
                                    bulkWriteOperation_<%=cid%> = new java.util.ArrayList<>();
                                }
                                <%
                            }else{
                            %>
                                coll_<%=cid%>.replaceOne(queryObj_<%=cid%>,data_<%=cid%>);
                                <%
                            }
                        } else if("SET".equalsIgnoreCase(dataAction)){
                            // Bulk Updates
                            if(bulkWrite){
                                %>
                                if(bulkWriteOperationCounter_<%=cid%> < bulkWriteOperationSize_<%=cid%>){
                                    bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.UpdateOneModel<org.bson.Document>(queryObj_<%=cid%>,new org.bson.Document("$set", data_<%=cid%>)));
                                    bulkWriteOperationCounter_<%=cid%>++;
                                }else{
                                    bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.UpdateOneModel<org.bson.Document>(queryObj_<%=cid%>,new org.bson.Document("$set", data_<%=cid%>)));
                                    coll_<%=cid%>.bulkWrite(bulkWriteOperation_<%=cid%>, new com.mongodb.client.model.BulkWriteOptions().ordered(<%=bulkWriteType%>));
                                    bulkWriteOperationCounter_<%=cid%>=1;
                                    bulkWriteOperation_<%=cid%> = new java.util.ArrayList<>();
                                }
                                <%
                            }else{
                                if(updateAll){
                            	%>
                                coll_<%=cid%>.updateMany(queryObj_<%=cid%>,new org.bson.Document("$set", data_<%=cid%>));
                                <%
                                } else {
                                %>
                                coll_<%=cid%>.updateOne(queryObj_<%=cid%>,new org.bson.Document("$set", data_<%=cid%>));
                                <%
                                }
                            }
                        } else if("UPSERT".equalsIgnoreCase(dataAction)){
                            // Bulk Upsert
                            if(bulkWrite){%>
                                if(bulkWriteOperationCounter_<%=cid%> < bulkWriteOperationSize_<%=cid%>){
                                    bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.ReplaceOneModel<org.bson.Document>(queryObj_<%=cid%>, data_<%=cid%>,
                                        new <%= "MONGODB_4_4_X".equals(dbversion) ? "com.mongodb.client.model.ReplaceOptions()" : "com.mongodb.client.model.UpdateOptions()"%>.upsert(true)));
                                    bulkWriteOperationCounter_<%=cid%>++;
                                }else{
                                    bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.ReplaceOneModel<org.bson.Document>(queryObj_<%=cid%>, data_<%=cid%>,
                                        new <%= "MONGODB_4_4_X".equals(dbversion) ? "com.mongodb.client.model.ReplaceOptions()" : "com.mongodb.client.model.UpdateOptions()"%>.upsert(true)));
                                    coll_<%=cid%>.bulkWrite(bulkWriteOperation_<%=cid%>, new com.mongodb.client.model.BulkWriteOptions().ordered(<%=bulkWriteType%>));
                                    bulkWriteOperationCounter_<%=cid%>=1;
                                    bulkWriteOperation_<%=cid%> = new java.util.ArrayList<>();
                                }
                                <%
                            }else{%>
                                coll_<%=cid%>.replaceOne(queryObj_<%=cid%>, data_<%=cid%>,
                                    new <%= "MONGODB_4_4_X".equals(dbversion) ? "com.mongodb.client.model.ReplaceOptions()" : "com.mongodb.client.model.UpdateOptions()"%>.upsert(true));
                                <%
                            }
                        } else if("UPSERT_WITH_SET".equalsIgnoreCase(dataAction)){
                            // Bulk Upsert
                            if(bulkWrite){
                                %>
                                if(bulkWriteOperationCounter_<%=cid%> < bulkWriteOperationSize_<%=cid%>){
                                    bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.UpdateOneModel<org.bson.Document>(queryObj_<%=cid%>,new org.bson.Document("$set", data_<%=cid%>),new com.mongodb.client.model.UpdateOptions().upsert(true)));
                                    bulkWriteOperationCounter_<%=cid%>++;
                                }else{
                                    bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.UpdateOneModel<org.bson.Document>(queryObj_<%=cid%>,new org.bson.Document("$set", data_<%=cid%>),new com.mongodb.client.model.UpdateOptions().upsert(true)));
                                    coll_<%=cid%>.bulkWrite(bulkWriteOperation_<%=cid%>, new com.mongodb.client.model.BulkWriteOptions().ordered(<%=bulkWriteType%>));
                                    bulkWriteOperationCounter_<%=cid%>=1;
                                    bulkWriteOperation_<%=cid%> = new java.util.ArrayList<>();
                                }
                                <%
                            }else{
                                if(updateAll){%>
                                    coll_<%=cid%>.updateMany(queryObj_<%=cid%>,new org.bson.Document("$set", data_<%=cid%>),new com.mongodb.client.model.UpdateOptions().upsert(true));
                                    <%
                                } else {%>
                                    coll_<%=cid%>.updateOne(queryObj_<%=cid%>,new org.bson.Document("$set", data_<%=cid%>),new com.mongodb.client.model.UpdateOptions().upsert(true));
                                    <%
                                }
                            }
                        }
						%>	
					}else{
						<%
						if(dieOnError){
						%>
							throw new Exception("Data node or Query node configuration error! ");
						<%
						}else{
							if(isLog4jEnabled){
							%>
								log.error("<%=cid%> - Data node or Query node configuration error!");
							<%
							}
							%>
							System.err.println("Data node or Query node configuration error!");
						<%
						}
						%>	
					}
				<%
				}
    			%>

			}else{
				<%
				if(dieOnError){
				%>
					throw new Exception("There no data in json,Please check the json configuration");
				<%
				}else{
					if(isLog4jEnabled){
					%>
					log.error("<%=cid%> - There no data in json,Please check the json configuration");
					<%
					}
					%>
					System.err.println("There no data in json,Please check the json configuration");
				<%
				}
				%>	
			}		
		<%
		}
	}
	%>