<%@ jet 
    imports="
        org.talend.core.model.process.INode 
        org.talend.core.model.process.ElementParameterParser 
        org.talend.designer.codegen.config.CodeGeneratorArgument
        
        java.util.Map
        java.util.List
        java.util.Arrays
        java.util.Set
        java.util.HashMap
    " 
%>

    <%@ include file="../templates/MongoDB/ApplicationName.javajet"%>

    <%
    String mongoDbDriver = "com.mongodb.MongoClient";
    List<String> intAttributes = Arrays.asList(
		"CONNECTIONS_PER_HOST","CONNECT_TIMEOUT","HEARTBEAT_CONNECT_TIMEOUT",
		"HEARTBEAT_FREQUENCY","HEARTBEAT_SOCKET_TIMEOUT","LOCAL_THRESHOLD",
		"MAX_CONNECTION_IDLE_TIME","MAX_CONNECTION_LIFE_TIME","MAX_WAIT_TIME",
		"MIN_CONNECTIONS_PER_HOST","MIN_HEARTBEAT_FREQUENCY",
        "SERVER_SELECTION_TIMEOUT","SOCKET_TIMEOUT","THREADS_ALLOWED_TO_BLOCK_FOR_CONNECTION_MULTIPLIER"
		);
    
    List<String> booleanAttributes = Arrays.asList(
		"ALWAYS_USE_MBEANS","CURSOR_FINALIZER_ENABLED","SOCKET_KEEP_ALIVE",
		"SSL_INVALID_HOSTNAME_ALLOWED"
		);
        
    List<Map<String,String>> additionalList = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node,"__OPTIONAL_ATTRIBUTES__");
    Map<String,String> optionalConnectionAttributesMap = new HashMap<String,String>();
 	for(Map<String,String> map : additionalList){
		String attributeName = map.get("OPTIONAL_ATTRIBUTES_NAME");
		String attributeValue = map.get("OPTIONAL_ATTRIBUTES_VALUE");
		optionalConnectionAttributesMap.put(attributeName, attributeValue);
	}
    
    // Client options
    %>
    com.mongodb.MongoClientOptions clientOptions_<%=cid%> = new com.mongodb.MongoClientOptions.Builder().applicationName(applicationName_<%=cid %>)
<%
    if(applyOptionalAttributes){
        for(String key : optionalConnectionAttributesMap.keySet()){
            String value = optionalConnectionAttributesMap.get(key);
            boolean isIntType = intAttributes.contains(key);
            boolean isBooleanType = booleanAttributes.contains(key);
            if (isIntType || isBooleanType) {
                value = value.replaceAll("\"","");
            } 
            
            if ("ALWAYS_USE_MBEANS".equals(key)) {
            %>
                    .alwaysUseMBeans(<%=value%>)
            <%
            } else if ("CONNECTIONS_PER_HOST".equals(key)){
            %>
                    .connectionsPerHost(<%=value%>)
            <%
            } else if ("CONNECT_TIMEOUT".equals(key)){
            %>
                    .connectTimeout(<%=value%>)
            <%
            } else if ("CURSOR_FINALIZER_ENABLED".equals(key)){
            %>
                    .cursorFinalizerEnabled(<%=value%>)
            <%
            } else if ("HEARTBEAT_CONNECT_TIMEOUT".equals(key)){
            %>
                    .heartbeatConnectTimeout(<%=value%>)
            <%
            } else if ("HEARTBEAT_FREQUENCY".equals(key)){
            %>
                    .heartbeatFrequency(<%=value%>)
            <%
            } else if ("HEARTBEAT_SOCKET_TIMEOUT".equals(key)){
            %>
                    .heartbeatSocketTimeout(<%=value%>)
            <%
            } else if ("LOCAL_THRESHOLD".equals(key)){
            %>
                    .localThreshold(<%=value%>)
            <%
            } else if ("MAX_CONNECTION_IDLE_TIME".equals(key)){
            %>
                    .maxConnectionIdleTime(<%=value%>)
            <%
            } else if ("MAX_CONNECTION_LIFE_TIME".equals(key)){
            %>
                    .maxConnectionLifeTime(<%=value%>)
            <%
            } else if ("MAX_WAIT_TIME".equals(key)){
            %>
                    .maxWaitTime(<%=value%>)
            <%
            } else if ("MIN_CONNECTIONS_PER_HOST".equals(key)){
            %>
                    .minConnectionsPerHost(<%=value%>)
            <%
            } else if ("MIN_HEARTBEAT_FREQUENCY".equals(key)){
            %>
                    .minHeartbeatFrequency(<%=value%>)
            <%
            } else if ("REQUIRED_REPLICA_SET_NAME".equals(key)){
            %>
                    .requiredReplicaSetName(<%=value%>)
            <%
            } else if ("SERVER_SELECTION_TIMEOUT".equals(key)){
            %>
                    .serverSelectionTimeout(<%=value%>)
            <%
            } else if ("SOCKET_KEEP_ALIVE".equals(key)){
            %>
                    .socketKeepAlive(<%=value%>)
            <%
            } else if ("SOCKET_TIMEOUT".equals(key)){
            %>
                    .socketTimeout(<%=value%>)
            <%
            } else if ("SSL_INVALID_HOSTNAME_ALLOWED".equals(key)){
            %>
                    .sslInvalidHostNameAllowed(<%=value%>)
            <%
            } else if ("THREADS_ALLOWED_TO_BLOCK_FOR_CONNECTION_MULTIPLIER".equals(key)){
            %>
                    .threadsAllowedToBlockForConnectionMultiplier(<%=value%>)
            <%
            }
        }
    }

    // SSL
    if (useSSL) {
        %>
                    .socketFactory(javax.net.ssl.SSLSocketFactory.getDefault())
        <%
    }
%>

                    .build();

    // Empty client credentials list
    java.util.List<com.mongodb.MongoCredential> mongoCredentialList_<%=cid%> = new java.util.ArrayList<com.mongodb.MongoCredential>();

    <%
    // Authentication
    if (authentication){
        %>
        com.mongodb.MongoCredential mongoCredential_<%=cid%>;
        <%
        if((authenticationMechanism.equals("NEGOTIATE_MEC"))||(authenticationMechanism.equals("PLAIN_MEC"))||(authenticationMechanism.equals("SCRAMSHA1_MEC"))){
            String passwordFieldName = "__PASSWORD__";
%>
            <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
            <%
            if(authenticationMechanism.equals("NEGOTIATE_MEC")){
                if(dbversion.equals("MONGODB_3_0_X") || dbversion.equals("MONGODB_3_2_X") || version_3_5_X) {
%>
                    mongoCredential_<%=cid%> = com.mongodb.MongoCredential.createCredential(<%=dbuser%>, <%=usedAuthenticationDB%>, new String(decryptedPassword_<%=cid%>).toCharArray());
<%                    
                } else {
%>
                    mongoCredential_<%=cid%> = com.mongodb.MongoCredential.createMongoCRCredential(<%=dbuser%>, <%=usedAuthenticationDB%>, new String(decryptedPassword_<%=cid%>).toCharArray());
<%
                }
            } else if(authenticationMechanism.equals("PLAIN_MEC")){
%>
                mongoCredential_<%=cid%> = com.mongodb.MongoCredential.createPlainCredential(<%=dbuser%>, "$external", new String(decryptedPassword_<%=cid%>).toCharArray());
<%
            } else if(authenticationMechanism.equals("SCRAMSHA1_MEC")){
%>
                mongoCredential_<%=cid%> = com.mongodb.MongoCredential.createScramSha1Credential(<%=dbuser%>, <%=usedAuthenticationDB%>, new String(decryptedPassword_<%=cid%>).toCharArray());
<%
            }
        } else { // GSSAPI SASL (KERBEROS)
%>
            System.setProperty("java.security.krb5.realm", <%=krbRealm%>);
            System.setProperty("java.security.krb5.kdc", <%=krbKdc%>);
            System.setProperty("javax.security.auth.useSubjectCredsOnly", "false");
            mongoCredential_<%=cid%> = com.mongodb.MongoCredential.createGSSAPICredential(<%=krbUserPrincipal%>);
            <%
        }
        %>
        mongoCredentialList_<%=cid%>.add(mongoCredential_<%=cid%>);
        <%
    }

    // The client
    if(useReplicaSet){
        %>
        List<com.mongodb.ServerAddress> serverAddressList_<%=cid%> = new java.util.ArrayList<com.mongodb.ServerAddress>();
        <%
        for(Map<String,String> replicaAddr:replicaAddrs){
        %>
            serverAddressList_<%=cid%>.add(new com.mongodb.ServerAddress(<%=replicaAddr.get("REPLICA_HOST")%>,<%=replicaAddr.get("REPLICA_PORT")%>));
        <%
        }
        %>
			com.mongodb.Mongo mongo_<%=cid%> = new <%=mongoDbDriver%>(serverAddressList_<%=cid%>, mongoCredentialList_<%=cid%>, clientOptions_<%=cid%>);
        <%
    }else{
        %>
        com.mongodb.ServerAddress serverAddress_<%=cid%> = new com.mongodb.ServerAddress(<%=dbhost%>, <%=dbport%>);
		com.mongodb.Mongo mongo_<%=cid%> = new <%=mongoDbDriver%>(serverAddress_<%=cid%>, mongoCredentialList_<%=cid%>, clientOptions_<%=cid%>);
        
        <%
    }

    %>
    mongo_<%=cid%>.getAddress() ;
    <%if(version_3_5_X) {%>
		com.mongodb.client.MongoDatabase db_<%=cid%> = ((<%=mongoDbDriver%>)mongo_<%=cid%>).getDatabase(<%=dbname%>);
	<%} else {%>
		com.mongodb.DB db_<%=cid%> = mongo_<%=cid%>.getDB(<%=dbname%>);
	<%}%>
    
    <%
    if(isLog4jEnabled){
    %>
        log.info("<%=cid%> - Connecting to " + mongo_<%=cid%>.getServerAddressList() + ".");
    <%
    }
    if(queryOptionNoTimeOut){
        %>
            mongo_<%=cid%>.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
        <%
    }
    %>
    globalMap.put("mongo_<%=cid%>", mongo_<%=cid%>);
    globalMap.put("db_<%=cid%>", db_<%=cid%>);
