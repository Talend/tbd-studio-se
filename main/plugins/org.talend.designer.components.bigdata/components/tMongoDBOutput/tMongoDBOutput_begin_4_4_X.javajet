<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.Map
	" 
%>

	int nb_line_<%=cid %> = 0;
	<%
    List<IMetadataTable> metadatas = node.getMetadataList();
    if(metadatas != null && metadatas.size() > 0){
        IMetadataTable metadata = metadatas.get(0);
        if(metadata != null) {%>

			<%@ include file="@{org.talend.designer.components.bigdata}/components/templates/MongoDB/DBObjectUtil_3_5_X.javajet"%>

			<%
			boolean upsert_with_set = "UPSERT_WITH_SET".equalsIgnoreCase(dataAction);
			boolean insertOnlyColumnExists = false;
			boolean updateOnlyColumnExists = false;
			if(upsert_with_set) {
				for (java.util.Map<String, String> map: mapping) {
					boolean updatable = "true".equals(map.get("UPDATABLE"));
					boolean insertable = "true".equals(map.get("INSERTABLE"));
					
					if(insertable && !updatable) {
						insertOnlyColumnExists = true;
						continue;
					}
					
					if(updatable && !insertable) {
						updateOnlyColumnExists = true;
						continue;
					}
				}
				
				if(insertOnlyColumnExists) {
				%>
				DBObjectUtil_<%=cid%> insertObjectOnlyUtil_<%=cid%>=new DBObjectUtil_<%=cid%>();
				<%
				}
				
				if(updateOnlyColumnExists)  {
				%>
				DBObjectUtil_<%=cid%> updateObjectOnlyUtil_<%=cid%>=new DBObjectUtil_<%=cid%>();
				<%
				}
			}
			%>

			DBObjectUtil_<%=cid%> updateObjectUtil_<%=cid%>=new DBObjectUtil_<%=cid%>();
			DBObjectUtil_<%=cid%> queryObjectUtil_<%=cid%>=new DBObjectUtil_<%=cid%>();
			java.util.Map<String, String> pathMap_<%=cid%>=new java.util.HashMap<>();

			<%
			for (int i=0;i<mapping.size();i++) {
				String path = mapping.get(i).get("PARENT_NODE_PATH");
				if(path==null || "".equals(path)){
					path="\"\"";
				}
				String schemaColumn=mapping.get(i).get("SCHEMA_COLUMN");

				%>
				pathMap_<%=cid%>.put("<%=schemaColumn%>",<%=path%>);
				<%
			}%>

            com.mongodb.client.MongoClient mongo_<%=cid%>=null;
            com.mongodb.client.MongoDatabase db_<%=cid%>=null;

            <%if (useExistingConnection) {
                String connection = ElementParameterParser.getValue(node, "__CONNECTION__");%>
                mongo_<%=cid%>=(com.mongodb.client.MongoClient)globalMap.get("mongo_<%=connection%>");
                db_<%=cid%> = (com.mongodb.client.MongoDatabase)globalMap.get("db_<%=connection%>");
                <%if(isLog4jEnabled) {%>
                    log.info("<%=cid%> - Got an existing client from " + "<%=connection%>" + ".");
                    log.info("<%=cid%> - Got an existing DB from " + "<%=connection%>" + ".");
                    <%
                }
            } else {%>

                // Internal declarations
                List<com.mongodb.ServerAddress> addrs_<%=cid%> = new java.util.ArrayList<>();
                com.mongodb.MongoClientSettings.Builder clientSettingsBuilder_<%=cid%> = com.mongodb.MongoClientSettings.builder();
                com.mongodb.connection.ClusterSettings.Builder clusterSettingsBuilder_<%=cid%> = com.mongodb.connection.ClusterSettings.builder();
                com.mongodb.connection.SslSettings.Builder sslSettingsBuilder_<%=cid%> = com.mongodb.connection.SslSettings.builder();
                <%
                // clusterSettingsBuilder is always used, no need to check it
                boolean isSslSettingsBuilderUsed = false;
                %>

                <%@ include file="@{org.talend.designer.components.bigdata}/components/templates/MongoDB/GeneralMongoDBConnectionSettings_4_4_X.javajet"%>

                <%if(setWriteConcern) {%>
                    clientSettingsBuilder_<%=cid%>.writeConcern(com.mongodb.WriteConcern.<%=writeConcern%>);
                <%}%>
                mongo_<%=cid%> = com.mongodb.client.MongoClients.create(clientSettingsBuilder_<%=cid%>.build());
                resourceMap.put("mongo_<%=cid%>", mongo_<%=cid%>);
                db_<%=cid%> = mongo_<%=cid%>.getDatabase(<%=dbname%>);
                <%
            }%>

            <%if(isLog4jEnabled) {%>
                for (com.mongodb.connection.ServerDescription description : mongo_<%=cid%>.getClusterDescription().getServerDescriptions()) {
                    log.info("<%=cid%> - Connecting to " + description.getAddress());
                }
                <%
            }
            if(dropExistCollection) {%>
                db_<%=cid%>.getCollection(<%=collection%>).drop();
                <%
            }%>
            com.mongodb.client.MongoCollection<org.bson.Document> coll_<%=cid%> = db_<%=cid%>.getCollection(<%=collection%>);
            

            <%if(bulkWrite) {// BulkWrite
                if("INSERT".equalsIgnoreCase(dataAction)) {%>
                    List<com.mongodb.client.model.InsertOneModel<org.bson.Document>> bulkWriteOperation_<%=cid%> = new java.util.ArrayList<>();
                    <%
                } else if("UPSERT".equalsIgnoreCase(dataAction)||"UPDATE".equalsIgnoreCase(dataAction)) {%>
                    List<com.mongodb.client.model.ReplaceOneModel<org.bson.Document>> bulkWriteOperation_<%=cid%> = new java.util.ArrayList<>();
                    <%
                } else if("DELETE".equalsIgnoreCase(dataAction)) {%>
                    List<com.mongodb.client.model.DeleteOneModel<org.bson.Document>> bulkWriteOperation_<%=cid%> = new java.util.ArrayList<>();
                    <%
                } else if(upsert_with_set) {%>
                    List<com.mongodb.client.model.UpdateOneModel<org.bson.Document>> bulkWriteOperation_<%=cid%> = new java.util.ArrayList<>();
                    <%if(updateOnlyColumnExists) {%>
                        List<com.mongodb.client.model.UpdateOneModel<org.bson.Document>> bulkWriteOperationForUpdateOnlyColumn_<%=cid%> = new java.util.ArrayList<>();
                        int bulkWriteOperationCounterForUpdateOnlyColumn_<%=cid%> = 1;
                        <%
                    }
                } else {%>//set
                    List<com.mongodb.client.model.UpdateOneModel<org.bson.Document>> bulkWriteOperation_<%=cid%> = new java.util.ArrayList<>();
                    <%
                }%>
                int bulkWriteOperationCounter_<%=cid%> = 1;
                final int bulkWriteOperationSize_<%=cid%> = Integer.parseInt(<%=bulkWriteOperationSize%>);
                <%
            }

            if (isLog4jEnabled) {%>
                log.info("<%=cid%> - Start to write data into database [" + db_<%=cid%>.getName() + "].");
                <%
            }
        }
    }%>