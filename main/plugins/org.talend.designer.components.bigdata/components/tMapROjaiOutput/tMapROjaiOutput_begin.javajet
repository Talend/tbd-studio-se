<%@ jet 
imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		java.util.List
		java.util.Map" 
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/Log4jFileUtil.javajet"%>
<% 
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
  	String cid = node.getUniqueName();
  	java.util.List<java.util.Map<String, String>> mappings = (java.util.List<java.util.Map<String, String>>)ElementParameterParser.getObjectValueXML(node, "__MAPPING__");
    String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
    String table = ElementParameterParser.getValue(node,"__TABLE__");
    boolean setBulkWrite = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__SET_BULK_WRITE__"));
    String bulkWriteOperationSize = ElementParameterParser.getValue(node, "__BULK_WRITE_SIZE__");
    boolean useKrb = "true".equals(ElementParameterParser.getValue(node, "__USE_KRB__"));
	boolean useKeytab = "true".equals(ElementParameterParser.getValue(node, "__USE_KEYTAB__"));
	String userPrincipal = ElementParameterParser.getValue(node, "__PRINCIPAL__");
	String keytabPath = ElementParameterParser.getValue(node, "__KEYTAB_PATH__");
    List<? extends IConnection> inConns = node.getIncomingConnections(EConnectionType.FLOW_MAIN);

    IConnection inConn = null;
    IMetadataTable metadata = null;
    
    if(inConns!=null && inConns.size()> 0) {
        inConn = inConns.get(0);
        metadata = inConn.getMetadataTable();
    }
    
    List<IMetadataColumn> columnList = metadata.getListColumns();
    Map<String, IMetadataColumn> columnMap = new java.util.HashMap<String, IMetadataColumn>();
    
    for  (IMetadataColumn column : columnList) {
        columnMap.put(column.getLabel(), column);
    }

    %>
    java.util.Map<String, String> pathMap_<%=cid%> = new java.util.HashMap<String, String>();
    String path_<%=cid%> = null;

<%
    for (Map<String, String> pathElement : mappings) {
        String schemaColumn = pathElement.get("SCHEMA_COLUMN");
        String dbColumn = (columnMap.get(schemaColumn)).getOriginalDbColumnName();
%>

    path_<%=cid%> = new String(<%=pathElement.get("PARENT_FIELD_PATH")%>);
    path_<%=cid%> = "".equals(path_<%=cid%>) ? "<%=dbColumn%>" : path_<%=cid%> + "." + "<%=dbColumn%>";
    pathMap_<%=cid%>.put("<%=dbColumn%>", path_<%=cid%>);
    
<%
    }
%>


    <%if(useKrb){%>
        class ExeCMd_<%=cid%>{
		    private boolean UsePwd = false;
		    String message;
		    
		    public boolean exec(String[] arg0) throws Exception{
		        boolean result = true;
		    
		        Process process = Runtime.getRuntime().exec(arg0);
				log.debug("Commend: " + java.util.Arrays.asList(arg0).toString());
		        if(UsePwd){
		            java.io.PrintWriter pwout = new java.io.PrintWriter(process.getOutputStream());
		        <%if(!useKeytab){
		        String passwordFieldName = "__KERBEROS_PASSWORD__";%>
		        <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
		            pwout.println(decryptedPassword_<%=cid%>); 
		            pwout.flush();
		        <%}%>
		        }
		    
		        java.io.BufferedReader bufferedReader = new java.io.BufferedReader(new java.io.InputStreamReader(process.getInputStream()));
		        while ((message = bufferedReader.readLine()) != null) {
			        System.out.println(message);
		        }
		        java.io.BufferedReader bufferedReader2 = new java.io.BufferedReader(new java.io.InputStreamReader(process.getErrorStream()));
		        while ((message = bufferedReader2.readLine()) != null) {
			        System.err.println(message);
			        result = false;
		        }
		        process.waitFor();
		        return result;
		    }
		    
		    public void setUsePwd(boolean usePwd){
		       UsePwd = usePwd;
		    }
		    
		}
		
		ExeCMd_<%=cid%> exeCMd_<%=cid%> = new ExeCMd_<%=cid%>();
		
        
		java.util.ArrayList<String> cmd_<%=cid%> = new java.util.ArrayList<String>();
		cmd_<%=cid%>.add("kinit");
		
		<%if(useKeytab){%>
		cmd_<%=cid%>.add("-k");
		cmd_<%=cid%>.add("-t");
		cmd_<%=cid%>.add(<%=keytabPath%>);
		<%}else{%>
		exeCMd_<%=cid%>.setUsePwd(true);
		<%}%>
		cmd_<%=cid%>.add(<%=userPrincipal%>);
		
		if(!exeCMd_<%=cid%>.exec(cmd_<%=cid%>.toArray(new String[0]))){
		    throw new RuntimeException("Kerberos Authentication Failed.");
		}
		
		java.util.ArrayList<String> cmd2_<%=cid%> = new java.util.ArrayList<String>();
		
		String os_<%=cid%> = System.getProperty("os.name");  
        if(os_<%=cid%>.toLowerCase().startsWith("win")){  
           cmd2_<%=cid%>.add("maprlogin.bat");
        }else{
           cmd2_<%=cid%>.add("maprlogin");
        }
		   cmd2_<%=cid%>.add("kerberos");
		   
		boolean loginResult_<%=cid%> = new ExeCMd_<%=cid%>().exec(cmd2_<%=cid%>.toArray(new String[0]));
		if(!loginResult_<%=cid%>){
		    throw new RuntimeException("Mapr Login failed. Please see the error log at MAPR_HOME/log for more details");
		}
		
    <%}%>

  	    int nb_line_<%=cid %>=0;
  	    int rejectedCount_<%=cid%>=0;
  	    boolean whetherReject_<%=cid%> = false;
  	  	com.mapr.db.Admin admin_<%=cid%> = com.mapr.db.MapRDB.newAdmin();
  		com.mapr.db.TableDescriptor tableDescriptor_<%=cid%> = com.mapr.db.MapRDB.newTableDescriptor(<%=table%>);
  		long bulkWriteSize_<%=cid%> = Long.parseLong(<%=bulkWriteOperationSize%>);
  		com.mapr.db.Table table_<%=cid%>=null;
  	<%
  		if("NONE".equals(tableAction)){
  		%>
  	
  	    table_<%=cid%> = com.mapr.db.MapRDB.getTable(<%=table%>);
  	
  	    <%
  		}else if("DROP_CREATE".equals(tableAction)){
  		%>
  		com.mapr.db.MapRDB.deleteTable(<%=table%>);
  		table_<%=cid%> = admin_<%=cid%>.createTable(tableDescriptor_<%=cid%>);
  		  	<%
  		}else if("CREATE".equals(tableAction)){
  		%>
  		table_<%=cid%> = admin_<%=cid%>.createTable(tableDescriptor_<%=cid%>);
  		  	<%
  		}else if("CREATE_IF_NOT_EXISTS".equals(tableAction)){
  		%>
  		if(!com.mapr.db.MapRDB.tableExists(<%=table%>)){
  		    table_<%=cid%> = admin_<%=cid%>.createTable(tableDescriptor_<%=cid%>);
  		}else{
  		    table_<%=cid%> = com.mapr.db.MapRDB.getTable(<%=table%>);
  		}
  		
  		  	<%
  		}else if("DROP_IF_EXISTS_AND_CREATE".equals(tableAction)){
  		%>
  		
  		if(com.mapr.db.MapRDB.tableExists(<%=table%>)){
  		    com.mapr.db.MapRDB.deleteTable(<%=table%>);
  		}
  		table_<%=cid%> = admin_<%=cid%>.createTable(tableDescriptor_<%=cid%>);
  		
  		  	<%
  		}else if("TRUNCATE".equals(tableAction)){
  		%>
  		table_<%=cid%> = com.mapr.db.MapRDB.getTable(<%=table%>);
  		  	    // all records in the table
	    org.ojai.DocumentStream rst_<%=cid%> = table_<%=cid%>.find();
        java.util.Iterator<org.ojai.Document> itrst_<%=cid%> = rst_<%=cid%>.iterator();
        org.ojai.Document readRecord_<%=cid%>;
        while (itrst_<%=cid%>.hasNext()) {
          readRecord_<%=cid%> = itrst_<%=cid%>.next();
          table_<%=cid%>.delete(readRecord_<%=cid%>.getId());
        }
        rst_<%=cid%>.close();
        table_<%=cid%>.flush();
  		  	<%
  		}
  		%>
  		admin_<%=cid%>.close();
  		<%
  			if(setBulkWrite){
  			%>
  			
  			long bulkCount_<%=cid%> = 0l;
  			java.io.File temp_<%=cid%> = java.io.File.createTempFile("<%=cid%>", ".jsontemp");
  			java.io.BufferedWriter out_<%=cid%> = new java.io.BufferedWriter(new java.io.FileWriter(temp_<%=cid%>));
  			class DelegateImpl_<%=cid%> extends org.ojai.json.Events.BaseDelegate {}
  			DelegateImpl_<%=cid%> di_<%=cid%> = new DelegateImpl_<%=cid%>();
  			java.util.Map<org.ojai.FieldPath, org.ojai.Value.Type> fieldPathTypeMap_<%=cid%> = new java.util.HashMap<org.ojai.FieldPath, org.ojai.Value.Type>();
<%
	if (metadata!=null) {
		List< ? extends IConnection> conns = node.getIncomingConnections();
		for (IConnection conn : conns) {
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				int sizeColumns = columnList.size();
				for (int i = 0; i < sizeColumns; i++) {
					IMetadataColumn column = columnList.get(i);
					
					        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					        String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
					        String rowType = null;
					        if(("java.util.Date").equals(typeToGenerate)){
					            rowType = "DATE";
					        }else if ("BigDecimal".equals(typeToGenerate)){
					            rowType = "DECIMAL";
					        }else if ("byte[]".equals(typeToGenerate)){
					            rowType = "BINARY";
					        }else if ("Integer".equals(typeToGenerate)){
					            rowType = "INT";
					        }else if ("Character".equals(typeToGenerate)){
					        	rowType = "STRING";
					        }
					        else{
					            rowType = typeToGenerate.toUpperCase();
					        }
%>
					        path_<%=cid%> = pathMap_<%=cid%>.get("<%=column.getOriginalDbColumnName()%>");
                            fieldPathTypeMap_<%=cid%>.put(org.ojai.FieldPath.parseFrom(path_<%=cid%>),org.ojai.Value.Type.<%=rowType%>);

                     <%
                            }
                        }
                  }
  			}
  		}
  		%>
