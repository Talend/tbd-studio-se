<%@ jet
%>
<%
	boolean useColumns = "true".equals(ElementParameterParser.getValue(node,"__USE_COLUMNS__"));
	List<Map<String, String>> columns = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__COLUMNS__");
	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	String table = ElementParameterParser.getValue(node,"__TABLE__");
	String username = ElementParameterParser.getValue(node,"__USERNAME__");
	boolean passwordStoredInFile = "true".equals(ElementParameterParser.getValue(node, "__PASSWORD_STORED_IN_FILE__"));
	boolean printLog = "true".equals(ElementParameterParser.getValue(node,"__PRINT_LOG__"));
	boolean verbose = "true".equals(ElementParameterParser.getValue(node,"__VERBOSE__"));
	boolean append = "true".equals(ElementParameterParser.getValue(node,"__APPEND__"));
	boolean direct = "true".equals(ElementParameterParser.getValue(node,"__DIRECT__"));
	
	boolean compress = "true".equals(ElementParameterParser.getValue(node,"__COMPRESS__"));
	boolean useHadoopCodec = "true".equals(ElementParameterParser.getValue(node,"__DEFINE_HADOOP_CODEC__"));
	String hadoopCodec = ElementParameterParser.getValue(node,"__HADOOP_CODEC__");
	
	boolean deleteTargetDirectory = "true".equals(ElementParameterParser.getValue(node, "__DELETE_TARGET_DIR__"));
	boolean splitInputStreamDirect = "true".equals(ElementParameterParser.getValue(node, "__DEFINE_DIRECT_SPLIT_SIZE__"));
	String directSplitSize = ElementParameterParser.getValue(node, "__DIRECT_SPLIT_SIZE__");
	boolean mysqlDelimiters = "true".equals(ElementParameterParser.getValue(node,"__MYSQL_DELIMITERS__"));
	String fileFormat = ElementParameterParser.getValue(node,"__FILE_FORMAT__");
	boolean useTarget = "true".equals(ElementParameterParser.getValue(node,"__USE_TARGET__"));
	String target = ElementParameterParser.getValue(node,"__TARGET__");
	boolean useMappers = "true".equals(ElementParameterParser.getValue(node,"__USE_MAPPERS__"));
	String mappers = ElementParameterParser.getValue(node,"__MAPPERS__");
	List<Map<String,String>> additionalList = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node,"__ADDITIONAL_ARGUMENTS__");
	boolean isUseSpeedParallel = "true".equals(ElementParameterParser.getValue(node,"__USE_SPEED_PARALLEL__"));
	List<Map<String,String>> specificParams= (List<Map<String, String>>)ElementParameterParser.getObjectValue(node,"__SPECIFIC_PARAMS__");
	boolean overrideJavaMapping = "true".equals(ElementParameterParser.getValue(node, "__DEFINE_JAVA_MAPPING__"));
	boolean overrideHiveMapping = "true".equals(ElementParameterParser.getValue(node, "__DEFINE_HIVE_MAPPING__"));
	boolean isUseAdditionParams = "true".equals(ElementParameterParser.getValue(node,"__USE_ADDITION_PARAM__"));
	String specificAdditionParams=ElementParameterParser.getValue(node,"__SPECIFIC_ADDITION_PARAM__");
	String additionalCommandLineArguments = ElementParameterParser.getValue(node,"__ADDITIONAL_COMMANDLINE_ARGUMENTS__");
	
	boolean useWhere = "true".equals(ElementParameterParser.getValue(node,"__USE_WHERE__"));
	String where = ElementParameterParser.getValue(node,"__WHERE__");
	where = where.substring(1, where.length()-1);
	where = "\"\\\""+where+"\\\"\"";
	
	boolean useQuery = "true".equals(ElementParameterParser.getValue(node,"__USE_QUERY__"));
	String query = ElementParameterParser.getValue(node,"__QUERY__");
	query = query.replaceAll("\n"," ");
	query = query.replaceAll("\r"," ");
	
	boolean useSplit = "true".equals(ElementParameterParser.getValue(node,"__USE_SPLIT__"));
	String split = ElementParameterParser.getValue(node,"__SPLIT__");
	
	boolean dieOnError = "true".equals(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
%>

<%@ include file="@{org.talend.designer.components.bigdata}/components/templates/Sqoop/SqoopAdditionalArgumentParser.javajet"%>

<%
String sColumns = "\\\"";
int size = columns.size();
int current = 0;
for (Map<String, String> row : columns) {
    String column = row.get("COLUMN");
    column = column.substring(1, column.length()-1);
    if (size-1 == current) {
        sColumns += column;
    } else {
        sColumns += column + ",";
    }
    current++;
}
sColumns += "\\\"";
%> 


//call the cmd part
Runtime runtime_<%=cid %> = Runtime.getRuntime();

<%
String passwordFieldName = "__PASSWORD__";
%>

<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>	

String[] cmd_<%=cid %> = new String[] {"sqoop", "import"
<%
boolean isNull=false; 
if(isUseSpeedParallel && specificParams!=null){
	boolean isFirstParam=true;
	for(Map<String,String> specificArg : specificParams){ 
		isNull=false; 
	 	if(specificArg.get("SPECIFIC_PARAM_VALUE")==null || "".equals(specificArg.get("SPECIFIC_PARAM_VALUE"))) { 
	 		isNull=true; 
	 	} 
	 	if(!isNull) { 
%> 
			,"-D<%=specificArg.get("SPECIFIC_PARAM")%>="+<%=specificArg.get("SPECIFIC_PARAM_VALUE")%>
<% 
		} 
	} 
} 
if(isUseSpeedParallel && isUseAdditionParams){
%>
,<%=specificAdditionParams%>
<%
}
%>

, "--connect", <%=connection%>, "--username", <%=username%>
<%if(passwordStoredInFile) {%>
	, "--password-file", <%=(String)ElementParameterParser.getValue(node, "__PASSWORD_FILE__")%>
<%} else {%>
	, "--password", decryptedPassword_<%=cid%>
<%}%>
<%if(isUseSpeedParallel){%>,"--connection-manager","org.apache.sqoop.teradata.TeradataConnManager"<%}%>
<%if(useQuery){%>, "--query", <%=query%><%} else {%>
	, "--table", <%=table%>
    <%if(useColumns){%>, "--columns", "<%=sColumns%>"<%}%>
    <%if(useWhere){%>, "--where", <%=where%><%}%>
<%}%>
<%if(printLog && verbose){%>, "--verbose"<%}%>
<%if(append){%>, "--append"<%}%>
<%if(deleteTargetDirectory){%>, "--delete-target-dir"<%}%>
<%if(direct){%>
	, "--direct"
<%
	if(splitInputStreamDirect) {
%>
	, "--direct-split-size", <%=directSplitSize%>
<%
	}
}%>
<%if(compress){%>
	, "--compress"
<%
	if(useHadoopCodec) {
%>
	, "--compression-codec", <%=hadoopCodec%>
<%
	}
}%>
<%if(useTarget || useQuery){%>, "--target-dir", <%=target%><%}%>
<%if(fileFormat.equals("sequencefile")){%>, "--as-sequencefile"<%}%>
<%if(fileFormat.equals("avrofile")){%>, "--as-avrodatafile"<%}%>
<%if(fileFormat.equals("parquetfile")){%>, "--as-parquetfile"<%}%>
<%if(mysqlDelimiters){%>, "--mysql-delimiters"<%}%>
<%if(useMappers){%>, "--num-mappers", <%=mappers%><%}%>
<%if(useSplit){%>, "--split-by", <%=split%><%}%>
<%
if(additionalList != null){ 
	for(Map<String,String> additionalMap : additionalList){ 
		isNull=false; 
	 	if(additionalMap.get("ADDITIONAL_VALUE")==null || "".equals(additionalMap.get("ADDITIONAL_VALUE"))) { 
	 		isNull=true; 
	 	} 
	 	if(!isNull) { 
%> 
			,"<%=additionalMap.get("ADDITIONAL_ARGUMENT")%>", <%=additionalMap.get("ADDITIONAL_VALUE")%> 
<% 
		} else { 
%> 
			,"<%=additionalMap.get("ADDITIONAL_ARGUMENT")%>" 
<% 
		} 
	} 
} 

if(overrideJavaMapping) {
	List<Map<String,String>> javaMappings = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node,"__JAVA_TYPE_MAPPING__");
	if(javaMappings!=null && javaMappings.size()>0) {
%>
		,"--map-column-java"
<%
		boolean first = true;	
		for(Map<String,String> javaMapping : javaMappings) {
			if(first) {
				first = false;
%>
				,<%=javaMapping.get("COLUMN_NAME")%> + "=" + <%=javaMapping.get("JAVA_TYPE")%>
<%
			} else {
%>
				+"," + <%=javaMapping.get("COLUMN_NAME")%> + "=" + <%=javaMapping.get("JAVA_TYPE")%>
<%
			}	
		}
	}
}

if(overrideHiveMapping) {
	List<Map<String,String>> hiveMappings = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node,"__HIVE_TYPE_MAPPING__");
	if(hiveMappings!=null && hiveMappings.size()>0) {
%>
		,"--map-column-hive"
<%	
		boolean first = true;	
		for(Map<String,String> hiveMapping : hiveMappings) {
			if(first) {
				first = false;
%>
				,<%=hiveMapping.get("COLUMN_NAME")%> + "=" + <%=hiveMapping.get("HIVE_TYPE")%>
<%
			} else {
%>
				+"," + <%=hiveMapping.get("COLUMN_NAME")%> + "=" + <%=hiveMapping.get("HIVE_TYPE")%>
<%
			}	
		}
	}
}
%>
};

String[] additionalArgs_<%=cid%> = parser_<%=cid%>.parse(<%=additionalCommandLineArguments%>);
cmd_<%=cid %> = (String[]) org.apache.commons.lang.ArrayUtils.addAll(cmd_<%=cid %>, additionalArgs_<%=cid%>);

<%if(isLog4jEnabled) {%>
java.lang.StringBuilder stringBuilder_<%=cid%> = new java.lang.StringBuilder();

for(String parameter_<%=cid%> : cmd_<%=cid %>) {
	stringBuilder_<%=cid%>.append(parameter_<%=cid%>);
	stringBuilder_<%=cid%>.append(" ");
}
log.info("<%=cid%> - execute sqoop command: " + stringBuilder_<%=cid%>.toString());
<%}%>

Process ps_<%=cid%> = null;
java.lang.StringBuilder sb_<%=cid%> = null;

try {
	ps_<%=cid%> = runtime_<%=cid%>.exec(cmd_<%=cid%>);
	byte[] byteArray_<%=cid%> = new byte[1024];
	int len_<%=cid%> = 0;

	java.io.InputStream errorStream_<%=cid%> = new java.io.BufferedInputStream(ps_<%=cid%>.getErrorStream());
	sb_<%=cid%> = new java.lang.StringBuilder();
	while ((len_<%=cid%> = errorStream_<%=cid%>.read(byteArray_<%=cid%>)) != -1) {
		String line_<%=cid%> = new String(byteArray_<%=cid%>, 0, len_<%=cid%>, "ISO-8859-1");
<%
		if(printLog){
%>
	    	System.err.println(line_<%=cid%>);
<%
		}
%>
		sb_<%=cid%>.append(line_<%=cid%>);
	}
	globalMap.put("<%=cid%>_ERROR_MESSAGE", sb_<%=cid%>.toString());

	<%if(isLog4jEnabled) {%>
		log.error("<%=cid%> - " + sb_<%=cid%>.toString());
	<%}%>

	byteArray_<%=cid%> = new byte[1024];
	len_<%=cid%> = 0;
	java.io.InputStream inputStream_<%=cid%> = new java.io.BufferedInputStream(ps_<%=cid%>.getInputStream());
	sb_<%=cid%> = new java.lang.StringBuilder();
	while ((len_<%=cid%> = inputStream_<%=cid%>.read(byteArray_<%=cid%>)) != -1) {
		String line_<%=cid%> = new String(byteArray_<%=cid%>, 0, len_<%=cid%>, "ISO-8859-1");
<%
		if(printLog){
%>
	    	System.out.println(line_<%=cid%>);
<%
		}
%>
		sb_<%=cid%>.append(line_<%=cid%>);
	}
} catch (Exception e) {
<%
	if(dieOnError) {
%>
		throw e;
<%		
	} else {
%>
		System.err.println(e.getMessage());
		<%if(isLog4jEnabled) {%>
		log.error("<%=cid%> - " + e.getMessage());
		<%}
	}
%>	
}

	int result_<%=cid%> = ps_<%=cid%>.waitFor();
	globalMap.put("<%=cid%>_EXIT_CODE", result_<%=cid%>);

<%
	if(dieOnError) {
%>
		if(ps_<%=cid%>.exitValue()>0) {
			throw new Exception("The Sqoop import has failed. Please check the logs.");
		}
<%		
	}
%>

if(sb_<%=cid%>!=null) {
	globalMap.put("<%=cid%>_OUTPUT_MESSAGE", sb_<%=cid%>.toString());
	<%if(isLog4jEnabled) {%>
		log.info("<%=cid%> - " + sb_<%=cid%>.toString());
	<%}%>
}
