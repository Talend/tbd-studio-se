<%@ jet
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.IMetadataColumn
		java.util.List
		java.util.Map
		"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	String previous_node="";
	String start_node="";
	
	boolean inMain = true;
	boolean isExecutedThroughWebHCat = false;
	
	boolean isQuboleDistribution = false;
	boolean isCloudDistribution = false;
	boolean isQuboleS3Resource = false;
	String quboleS3ResourceAccessKey = "";
	String quboleS3ResourceSecretKey = "";
	String quboleS3ResourceBucketName = "";
	String quboleS3ResourceBucketKey = "";

	String previousOutputConnectionName = "";
	
	if(node.getIncomingConnections()!=null && node.getIncomingConnections().size()>0) {
		IConnection connection = node.getIncomingConnections().get(0);
		previous_node = connection.getSource().getUniqueName();
		INode loadNode = node.getDesignSubjobStartNode();
		start_node = loadNode.getUniqueName();
		
		boolean isLocal = "true".equals(ElementParameterParser.getValue(loadNode, "__LOCAL__"));

        if(!isLocal) {
            String loadDistribution = ElementParameterParser.getValue(loadNode, "__DISTRIBUTION__");
            String loadPigVersion = ElementParameterParser.getValue(loadNode, "__PIG_VERSION__");
            org.talend.hadoop.distribution.component.PigComponent pigDistrib = null;
            try {
                pigDistrib = (org.talend.hadoop.distribution.component.PigComponent) org.talend.hadoop.distribution.DistributionFactory.buildDistribution(loadDistribution, loadPigVersion);
            } catch (java.lang.Exception e) {
                e.printStackTrace();
                return "";
            }

            boolean isCustom = pigDistrib instanceof org.talend.hadoop.distribution.custom.CustomDistribution;
            isExecutedThroughWebHCat = !isCustom && pigDistrib != null && pigDistrib.isExecutedThroughWebHCat();
            isQuboleDistribution = pigDistrib != null && pigDistrib.isQuboleDistribution();
            isCloudDistribution = pigDistrib != null && pigDistrib.isCloudDistribution();
            if (isQuboleDistribution && ElementParameterParser.getBooleanValue(loadNode, "__QUBOLE_S3__")) {
            	quboleS3ResourceAccessKey = ElementParameterParser.getValue(loadNode, "__QUBOLE_S3_ACCESS_KEY__");
            	quboleS3ResourceSecretKey = ElementParameterParser.getPasswordValue(loadNode, "__QUBOLE_S3_SECRET_KEY__");
            	quboleS3ResourceBucketName = ElementParameterParser.getValue(loadNode, "__QUBOLE_S3_BUCKET_NAME__");
            	quboleS3ResourceBucketKey = ElementParameterParser.getValue(loadNode, "__QUBOLE_S3_BUCKET_KEY__");
            }
        }
		
		inMain = loadNode.isSubtreeStart();
		previousOutputConnectionName = connection.getName();
	}
	
	String outputConnectionName = "";
	List<IMetadataColumn> outputMetadataColumns = null;
	List<IConnection> outputConnections = (List<IConnection>)node.getOutgoingConnections();
	if(outputConnections!=null && outputConnections.size()>0) {
		outputConnectionName = outputConnections.get(0).getName();
		outputMetadataColumns = outputConnections.get(0).getMetadataTable().getListColumns();
	}
	
	List<Map<String, String>> key_fields = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__KEY_FIELDS__");
	List<Map<String, String>> operations_config = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__OPERATIONS__");

	
	boolean useParallel = "true".equals(ElementParameterParser.getValue(node, "__INCREASE_PARALLELISM__"));
	String reduce_number = ElementParameterParser.getValue(node, "__REDUCE_NUMBER__");
%>
	<%@ include file="@{org.talend.designer.components.bigdata}/components/templates/Pig/PigHeader.javajet"%>

	StringBuilder sb_<%=cid%> = new StringBuilder();
<%
	if(operations_config != null && operations_config.size()>0) {
%>
		routines.system.PigHelper helper_<%=cid%> = new routines.system.PigHelper();
	
		sb_<%=cid%>.append("<%=cid%>_GROUP = GROUP <%=previous_node%>_<%=previousOutputConnectionName%>_RESULT ");
<%
		if(key_fields != null && key_fields.size()>0) {
%>
			sb_<%=cid%>.append("BY (");
<%
			boolean isFirst = true;
    		for(Map<String, String> key_field : key_fields) {
    			if(!isFirst) {
%>
					sb_<%=cid%>.append(",");
<%	
				}
				isFirst=false;
%>
				sb_<%=cid%>.append("<%=key_field.get("INPUT_COLUMN")%>");
<%
			}
%>
			sb_<%=cid%>.append(")");
<%
		} else {
%>
			sb_<%=cid%>.append("ALL");
<%
		}
		
		if(useParallel) {
%>
			sb_<%=cid%>.append(" PARALLEL "+<%=reduce_number%>);
<%
		}
		
%>		
		sb_<%=cid%>.append(";");
		
		helper_<%=cid%>.add("query",sb_<%=cid%>.toString());

		sb_<%=cid%> = new StringBuilder();
		sb_<%=cid%>.append("<%=cid%>_<%=outputConnectionName%>_RESULT = FOREACH <%=cid%>_GROUP GENERATE ");

		<%
        Boolean notFirst = false;
		for (IMetadataColumn outputColumn: outputMetadataColumns) {
            boolean isOperationConfig = false;
		    if (notFirst) {
		        %>
	            sb_<%=cid%>.append(",");
	            <%
		    } else {
		        notFirst = true;
		    }
		    for (Map<String, String> operationConfig: operations_config) {
		        if (operationConfig.get("OUTPUT_COLUMN").equals(outputColumn.getLabel())) {
		            %>
	                sb_<%=cid%>.append(" <%=operationConfig.get("FUNCTION")%>(<%=previous_node%>_<%=previousOutputConnectionName%>_RESULT.<%=operationConfig.get("INPUT_COLUMN")%>) AS <%=operationConfig.get("OUTPUT_COLUMN")%>");
            		<%
            		isOperationConfig = true;
		        }
		    }
		    if (!isOperationConfig) {
	            for(Map<String, String> keyField : key_fields) {
	                if (keyField.get("INPUT_COLUMN").equals(outputColumn.getLabel())) {
	                    %>
	                    sb_<%=cid%>.append("group<%=key_fields.size()>1?"."+keyField.get("INPUT_COLUMN"):""%> AS <%=keyField.get("INPUT_COLUMN")%>");
	                    <%
	                }
                }
		    }
		}
	
%>
		sb_<%=cid%>.append(";");
		
		helper_<%=cid%>.add("query",sb_<%=cid%>.toString());
		
		<%@ include file="@{org.talend.designer.components.bigdata}/components/templates/Pig/RegisterPigLatin.javajet"%>
<%
	}
	
%>
		
		
		
