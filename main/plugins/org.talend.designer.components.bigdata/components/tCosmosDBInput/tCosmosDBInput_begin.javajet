<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.utils.NodeUtil
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		org.talend.core.model.process.IConnectionCategory
		java.util.List 
    	java.util.Map		
	" 
%>

<%
  	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
  	INode node = (INode)codeGenArgument.getArgument();
  	String cid = node.getUniqueName();

    String dbhost   = ElementParameterParser.getValue(node, "__HOST__");
    String dbname   = ElementParameterParser.getValue(node, "__DATABASE__");
    String dbuser   = ElementParameterParser.getValue(node, "__USERNAME__");
    boolean authentication="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__REQUIRED_AUTHENTICATION__"));
    String authenticationMechanism = ElementParameterParser.getValue(node, "__AUTHENTICATION_MECHANISM__");
    String krbUserPrincipal = ElementParameterParser.getValue(node, "__KRB_USER_PRINCIPAL__");
    String krbRealm = ElementParameterParser.getValue(node, "__KRB_REALM__");
    String krbKdc = ElementParameterParser.getValue(node, "__KRB_KDC__");
    String dbpass   = ElementParameterParser.getValue(node, "__PASSWORD__");
    String mongoPort = ElementParameterParser.getValue(node, "__PORT__");
    String dbport = mongoPort.startsWith("context.") ? "Integer.valueOf(" + mongoPort + ").intValue()" : mongoPort.replace("\"", "");
    boolean useExistingConnection = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
    String collection = ElementParameterParser.getValue(node,"__COLLECTION__");
    String query = ElementParameterParser.getValue(node,"__QUERY__");
    query = query.replaceAll("\n","");
    query = query.replaceAll("\r","");
  	String limit = ElementParameterParser.getValue(node,"__LIMIT__");

  	List<Map<String, String>> mapping = (List<Map<String,String>>)ElementParameterParser.getObjectValueXML(node, "__MAPPING__");
  	List<Map<String, String>> sorts = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SORT__");
  	boolean useReplicaSet="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__USE_REPLICA_SET__"));
    List<Map<String,String>> replicaAddrs= (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__REPLICA_SET__");
    boolean useSSL = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__USE_SSL__"));

    // declare read preferences and write concerns for unified connection template
    boolean setReadPreference = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__SET_READ_PREFERENCE__"));
    String readPreference = ElementParameterParser.getValue(node, "__READ_PREFERENCE__");
    boolean setWriteConcern = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__SET_WRITE_CONCERN__"));
    String writeConcern = ElementParameterParser.getValue(node, "__WRITE_CONCERN__");

    boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
    List<Map<String, String>> aggregationStages = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__AGGREGATION_STAGES__");
    boolean isAggregationQuery = "AGGREGATION_QUERY".equals(ElementParameterParser.getValue(node,"__QUERY_TYPE__"));
    boolean useAuthDB = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__SET_AUTHENTICATION_DATABASE__"));
    String authDB = ElementParameterParser.getValue(node, "__AUTHENTICATION_DATABASE__");
    String usedAuthenticationDB = useAuthDB ? authDB : dbname;
    boolean useExternalSort = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__EXTERNAL_SORT_AGGREGATION__"));
    boolean specifyFields="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__SPECIFY_FIELDS__"));
    List<Map<String, String>> filter = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELDS_TO_RETURN__");
    boolean queryOptionNoTimeOut;
	String dbversion;
	if(useExistingConnection){
	    String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
        INode connectionNode = NodeUtil.getNodeByUniqueName(node.getProcess(), connection);
        dbversion = ElementParameterParser.getValue(connectionNode, "__DB_VERSION__");
        queryOptionNoTimeOut = "true".equalsIgnoreCase(ElementParameterParser.getValue(connectionNode, "__QUERYOPTION_NOTIMEOUT__"));
    }else{
        dbversion = ElementParameterParser.getValue(node, "__DB_VERSION__");
        queryOptionNoTimeOut = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__QUERYOPTION_NOTIMEOUT__"));
    }
    boolean version_3_5_X = "MONGODB_3_5_X".equals(dbversion);
    boolean version_4_4_X = "MONGODB_4_4_X".equals(dbversion);
    
    String objectType = (version_4_4_X) ? "org.bson.Document" : "com.mongodb.DBObject";
%>

	<%
  	List<IMetadataTable> metadatas = node.getMetadataList();
  	List<IMetadataColumn> columnList = null;
  	List<? extends IConnection> outputs = node.getOutgoingSortedConnections();
  	String firstConnName = "";
  	if (outputs.size() > 0) {
		IConnection out = outputs.get(0);
		if(out!=null && out.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
			firstConnName = out.getName();
		}
    }%>

    <%@ include file="../templates/CosmosDB/ApplicationName.javajet"%>

	int nb_line_<%=cid %> = 0;
	<%if(metadatas != null && metadatas.size() > 0) {
      	IMetadataTable metadata = metadatas.get(0);
      	if(metadata != null) {%>

            <%if (version_4_4_X) {%>
                <%@ include file="@{org.talend.designer.components.bigdata}/components/templates/MongoDB/GridFS/GetMongoDBConnection_4_4_X.javajet"%>
            <%} else {%>
                <%@ include file="@{org.talend.designer.components.bigdata}/components/templates/MongoDB/GridFS/GetMongoDBConnection_below_4_4_X.javajet"%>
            <%}%>

            <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/Log4jFileUtil.javajet"%>
            <%log4jFileUtil.startRetriveDataInfo();%>

			<%if(version_4_4_X) {%>
				com.mongodb.client.MongoCollection<org.bson.Document> coll_<%=cid%> = db_<%=cid%>.getCollection(<%=collection%>);
			<%} else {%>
				com.mongodb.DBCollection coll_<%=cid%> = db_<%=cid%>.getCollection(<%=collection%>);
			<%}%>

			try{
				// Add warning if an index is not in the query.
				boolean needIndexWarning = true;
				String indexList = "";
				java.lang.StringBuilder sb_<%=cid%> = new java.lang.StringBuilder();
				<%if(version_4_4_X) {%>
					for (com.mongodb.DBObject index: coll_<%=cid%>.listIndexes(com.mongodb.DBObject.class)) {
					<%
				} else {%>
					for (com.mongodb.DBObject index: coll_<%=cid%>.getIndexInfo()) {
					<%
				}%>
	                
				for (String key: ((com.mongodb.DBObject)index.get("key")).keySet()) {
					// The regexp is:
					// - contain the db DBcolumnName between two backslashed quotes
					// - is followed at some point by a colon
					// - there is no comma between the the DBcolumnName and the colon
					if  ((<%=query%>).matches(".*" + key.replace("*","\\*") + "[^,]*:.*")) {
						// We have an index, do not print error message
						needIndexWarning = false;
					} else {
						// This index is not in the query, add it into the indexList
						sb_<%=cid%>.append(", ").append(key);
					}
				}
				indexList = sb_<%=cid%>.toString();
				}

				if ((!"".equals(indexList)) && (needIndexWarning)) {
					<%if(isLog4jEnabled) {%>
						log.trace("<%=cid%> - The query does not contain any reference an index.  [" + indexList.substring(1) + " ]");
						<%
					} else {%>
						System.err.println("<%=cid%> - The query does not contain any reference an index.  [" + indexList.substring(1) + " ]");
						<%
					}%>
				}
			}catch(com.mongodb.MongoException e){
				// caught an exception after issuing the getIndexInfo()
				// don't fail the whole job
				// maybe due to authorization
			}

			<%
			// AGGREGATION QUERY
			if(isAggregationQuery) {%>
				<%if(version_4_4_X) {%>
					java.util.List<org.bson.conversions.Bson> aggregationStages_<%=cid %> = new java.util.ArrayList<>();
				<%} else {%>
					java.util.List<com.mongodb.DBObject> aggregationStages_<%=cid %> = new java.util.ArrayList<>();
					<%
				}%>

				<%for (int i=0; i<aggregationStages.size(); i++) {
					if(version_4_4_X) {%>
						aggregationStages_<%=cid %>.add(org.bson.Document.parse(<%=aggregationStages.get(i).get("AGGREGATION_STAGE")%>));
						<%
					} else {%>
						aggregationStages_<%=cid %>.add((com.mongodb.DBObject) com.mongodb.util.JSON.parse(<%=aggregationStages.get(i).get("AGGREGATION_STAGE")%>));
						<%
					}
				}
				if(version_4_4_X) {
					if(specifyFields) {
						java.lang.StringBuilder projection = new java.lang.StringBuilder();
						for (int i=0; i <filter.size(); i++) {
							String name = filter.get(i).get("FIELD_NAME");
							projection.append(i == filter.size()-1 ? name : name + ", ");
						}%>
						aggregationStages_<%=cid %>.add(com.mongodb.client.model.Aggregates.project(com.mongodb.client.model.Projections.include(<%=projection.toString()%>)));
						<%
					}%>
					com.mongodb.client.MongoCursor<org.bson.Document> cursor_<%=cid%> = coll_<%=cid%>.aggregate(aggregationStages_<%=cid %>).allowDiskUse(<%=useExternalSort%>).iterator();
					<%
				} else {
					if(specifyFields) {
						java.lang.StringBuilder projection = new java.lang.StringBuilder();
						for (int i=0; i <filter.size(); i++) {
							String name = filter.get(i).get("FIELD_NAME");
							projection.append(i == filter.size()-1 ? name : name + ", ");
						}%>
						String projectionString_<%=cid%> = com.mongodb.client.model.Aggregates.project(com.mongodb.client.model.Projections.include(<%=projection.toString()%>)).toBsonDocument(org.bson.BsonDocument.class, null).toJson();
						aggregationStages_<%=cid %>.add((com.mongodb.DBObject) com.mongodb.util.JSON.parse(projectionString_<%=cid%>));
						<%
					}%>
					com.mongodb.Cursor cursor_<%=cid%> = coll_<%=cid%>.aggregate(aggregationStages_<%=cid %>, com.mongodb.AggregationOptions.builder().outputMode(com.mongodb.AggregationOptions.OutputMode.CURSOR).allowDiskUse(<%=useExternalSort%>).build());
					<%
				}
				// FIND QUERY
			} else {
				if(version_4_4_X) {%>
					org.bson.Document myQuery_<%=cid%> = org.bson.Document.parse(<%=query%>);
					<%if(specifyFields) {
						java.lang.StringBuilder projection = new java.lang.StringBuilder();
						for (int i=0; i <filter.size(); i++) {
							String name = filter.get(i).get("FIELD_NAME");
							projection.append(i == filter.size()-1? name : name + ", ");
						}%>
						com.mongodb.client.FindIterable<org.bson.Document> findIterable_<%=cid%> = coll_<%=cid%>.find(myQuery_<%=cid%>).projection(com.mongodb.client.model.Projections.include(<%=projection.toString()%>)).noCursorTimeout(<%=queryOptionNoTimeOut%>);
						<%
					} else {%>
						com.mongodb.client.FindIterable<org.bson.Document> findIterable_<%=cid%> = coll_<%=cid%>.find(myQuery_<%=cid%>).noCursorTimeout(<%=queryOptionNoTimeOut%>);
						<%
					}
				} else {%>
					com.mongodb.DBObject myQuery_<%=cid%> = (com.mongodb.DBObject) com.mongodb.util.JSON.parse(<%=query%>);
					com.mongodb.DBObject fields_<%=cid%> = new com.mongodb.BasicDBObject();
					<%if(specifyFields) {
						java.lang.StringBuilder projection = new java.lang.StringBuilder();
						for (int i=0; i <filter.size(); i++) {
							String name = filter.get(i).get("FIELD_NAME");%>
							fields_<%=cid%>.put(<%=name%>, true);
							<%
						}
					}%>
		  			com.mongodb.DBCursor cursor_<%=cid%> = coll_<%=cid%>.find(myQuery_<%=cid%>, fields_<%=cid%>);
					<%
				}
			}%>

			class DBObjectInputUtil_<%=cid%>{
				// Get the node value in embedded document, 
				//If have no embedded document get root document node.
				
				public Object getValue(String parentNode,String currentName,<%=objectType%> dbObject){
					Object value=null;
					if(dbObject==null){
						return null;
					}
					if(parentNode == null || "".equals(parentNode)) {
					    if ("*".equals(currentName)) {
					        value = dbObject;
					    } else if(dbObject.get(currentName)!=null) {
							value=dbObject.get(currentName);
						}
					} else {
						String objNames[] = parentNode.split("\\.");
						<%=objectType%> currentObj=dbObject;
						for(int i=0;i<objNames.length;i++){
							currentObj=(<%=objectType%>)currentObj.get(objNames[i]);
							if(currentObj==null) {
								break;
							}
						}
						if("*".equals(currentName)) {
                            value = currentObj;
                        } else if(currentObj!=null) {
							value=currentObj.get(currentName);
						}
					}
					return value;
				}
			}
			DBObjectInputUtil_<%=cid%> dbObjectInputUtil_<%=cid%>=new DBObjectInputUtil_<%=cid%>();
			java.util.Map<String, String> pathMap_<%=cid%>=new java.util.HashMap<>();

			<%for (int i=0;i<mapping.size();i++) {
				String path = mapping.get(i).get("PARENT_NODE_PATH");
				if(path==null || "".equals(path)) {
					path="\"\"";
				}
				String schemaColumn=mapping.get(i).get("SCHEMA_COLUMN");%>
				pathMap_<%=cid%>.put("<%=schemaColumn%>",<%=path%>);
				<%
			}

			// Note: Aggregation queriess do not support limit
			if (limit != null && !"\"\"".equals(limit) && limit.length() > 0 && !isAggregationQuery) {%>
				<%if(version_4_4_X) {%>
					findIterable_<%=cid%> = findIterable_<%=cid%>.limit(<%=limit%>);
					<%
				} else {%>
					cursor_<%=cid%> = cursor_<%=cid%>.limit(<%=limit%>);
					<%
				}
			}

			// Note: Aggregation queriess do not support sort
			if(sorts.size()>0 && !isAggregationQuery) {%>
				<%if(version_4_4_X) {%>
					com.mongodb.BasicDBObject orderBy_<%=cid%> = new com.mongodb.BasicDBObject();
					<%
				} else {%>
					com.mongodb.DBObject orderBy_<%=cid%> = new com.mongodb.BasicDBObject();
					<%
				}
				for(Map<String, String> line:sorts) {
					int order=-1;
					if(("asc").equals(line.get("ORDER"))) {
        				order=1;
        			}%>
					orderBy_<%=cid%>.put(<%=line.get("COLNAME")%>,<%=order%>);
					<%
				}%>

				<%if(version_4_4_X) {%>
					findIterable_<%=cid%>.sort(orderBy_<%=cid%>);
					<%
				} else {%>
					cursor_<%=cid%>.sort(orderBy_<%=cid%>);
					<%
				}
			}%>

			<%if(version_4_4_X && !isAggregationQuery) {%>
				com.mongodb.client.MongoCursor<org.bson.Document> cursor_<%=cid%> = findIterable_<%=cid%>.iterator();
				<%
			}%>

			while (cursor_<%=cid%>.hasNext()) {
				<%
				columnList = metadata.getListColumns();
				int sizeColumns = columnList.size();
				%>
				<%=objectType%> o_<%=cid%> = cursor_<%=cid%>.next();
				nb_line_<%=cid %>++;

				<%if(firstConnName.length()>0) {%>
					Object valueObj_<%=cid%>=null;
					<%for (int i = 0; i < sizeColumns; i++) {
						IMetadataColumn column = columnList.get(i);
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
						JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
						String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
						%>
						valueObj_<%=cid%>=dbObjectInputUtil_<%=cid%>.getValue(pathMap_<%=cid%>.get("<%=column.getLabel() %>"),"<%=column.getOriginalDbColumnName() %>",o_<%=cid%>);
						<%if(javaType == JavaTypesManager.OBJECT) {%>
							<%=firstConnName %>.<%=column.getLabel() %> = valueObj_<%=cid%>;
							<%
						} else {%>
							if(valueObj_<%=cid%>!=null && valueObj_<%=cid%>.toString().length() > 0) {
								<%if(javaType == JavaTypesManager.DATE) {%>
									if (valueObj_<%=cid%> instanceof java.util.Date) {
										<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date((java.util.Date)valueObj_<%=cid%>, <%= patternValue %>);
									} else {
										<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date((String)valueObj_<%=cid%>, <%= patternValue %>);
									}
									<%
								}else if(javaType == JavaTypesManager.BYTE_ARRAY) {%>
									<%if(version_4_4_X) {%>
										<%=firstConnName %>.<%=column.getLabel() %> = java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap(((org.bson.types.Binary)valueObj_<%=cid%>).getData())).toString().getBytes(utf8Charset);
										<%
									} else {%>
										<%=firstConnName %>.<%=column.getLabel() %> = java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap((byte[])valueObj_<%=cid%>)).toString().getBytes(utf8Charset);
										<%
									}
								} else if(javaType == JavaTypesManager.STRING) {%>
									<%=firstConnName %>.<%=column.getLabel() %> = valueObj_<%=cid%>.toString();
									<%
								} else if (javaType == JavaTypesManager.INTEGER) {%>
									if (valueObj_<%=cid%>.getClass().equals(Double.class)) {
										<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Double(valueObj_<%=cid%>.toString()).intValue();
									} else {
										<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate %>(valueObj_<%=cid%>.toString());
									}
									<%
								} else if (javaType == JavaTypesManager.LONG) {%>
									if (valueObj_<%=cid%>.getClass().equals(Double.class)) {
										<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Double(valueObj_<%=cid%>.toString()).longValue();
									} else {
										<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate %>(valueObj_<%=cid%>.toString());
									}
									<%
								} else if (javaType == JavaTypesManager.SHORT) {%>
									if (valueObj_<%=cid%>.getClass().equals(Double.class)) {
										<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Double(valueObj_<%=cid%>.toString()).shortValue();
									} else {
										<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate %>(valueObj_<%=cid%>.toString());
									}
									<%
								} else {%>
									<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate %>(valueObj_<%=cid%>.toString());
									<%
								}%>
							} else {
								<%=firstConnName %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
							}
							<%
						}
					}
					log4jFileUtil.debugRetriveData(node);
				}
			}
		}%>
