<%@ jet
	imports="
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.process.IConnection
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List
		java.util.Map
"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	List<? extends IConnection> inConns = node.getIncomingConnections(EConnectionType.FLOW_MAIN);
	
	String dataAction 	= ElementParameterParser.getValue(node,"__DATA_ACTION__");
	String partitionKey = ElementParameterParser.getValue(node, "__PARTITION_KEY__");
	String sortKey 		= ElementParameterParser.getValue(node, "__SORT_KEY__");
	List<Map<String, String>> nameMappingTable = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__NAME_MAPPING__");
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	
	List<IMetadataTable> metadatas = node.getMetadataList();
	List< ? extends IConnection> connections = node.getIncomingConnections();
	if (connections == null || connections.size() == 0 || metadatas == null || metadatas.size() == 0){
	    return "";
	}
	
	List<IMetadataColumn> outPutColumns =  metadatas.get(0).getListColumns();
	if (outPutColumns == null || outPutColumns.isEmpty()) {
		return "";
	}
	
	IConnection conn = connections.get(0);
	if (!conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
		return "";
	}
%>

Object partitionKeyValue_<%=cid%>	= null;
Object sortKeyValue_<%=cid%>	= null;
java.util.Map<String, Object> mapValues_<%=cid%> = new java.util.HashMap<>();
java.util.Map<String, Boolean> dbTypeJSONMap_<%=cid%> = new java.util.HashMap<>();

<%  List<String[]> isJSONList = new java.util.ArrayList();
    for (int i = 0; i < outPutColumns.size(); i++) {
		IMetadataColumn column = outPutColumns.get(i);
		JavaType javaType   = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
		String isJSON       = ("JSON".equals(column.getType())) ? "Boolean.TRUE" : "Boolean.FALSE";
		String name 		= "\""+column.getOriginalDbColumnName()+"\"";
		String columnNode	= conn.getName() + "." + column.getLabel();
		boolean isDate		= (javaType == JavaTypesManager.DATE);
		boolean isString	= (javaType == JavaTypesManager.STRING);
		boolean isByteArray	= (javaType == JavaTypesManager.BYTE_ARRAY);

        isJSONList.add(new String[]{name, isJSON});

		// This is the Hash Key
		if(column.isKey() &&  name.equals(partitionKey)){ 
	
			 if(isDate){ %>
		 			partitionKeyValue_<%=cid%> = FormatterUtils.format_DateInUTC(<%=columnNode%>,  <%=column.getPattern()%>);
			 <% } else { %>
				 	partitionKeyValue_<%=cid%> = <%=columnNode%>;
			 <% } 
		
		// This is the Range Key
 		}else if(column.isKey() &&  name.equals(sortKey)){
 			
 			if(isDate){ %>
		 			sortKeyValue_<%=cid%> = FormatterUtils.format_DateInUTC(<%=columnNode%>,  <%=column.getPattern()%>);
			 <% } else { %>
				 	sortKeyValue_<%=cid%> = <%=columnNode%>;
			 <% }
		
 		// Other row items 
		}else {
			   // Handle Nullable Items (also if String is empty we submitted as null)
			   if(column.isNullable()) {  %>
			   
			   		if(null == <%=columnNode%> <%if(isString) {%> || <%=columnNode%>.isEmpty() <%}%> <%if(isByteArray) {%> || <%=columnNode%>.length == 0 <%}%>) {
			   			mapValues_<%=cid%>.put(<%=name%>, null);
			   		}else {
			   			<% if(isDate){ %>
					 			mapValues_<%=cid%>.put(<%=name%>, FormatterUtils.format_DateInUTC(<%=columnNode%>,  <%=column.getPattern()%>));
						 <% } else { %>
							 	mapValues_<%=cid%>.put(<%=name%>, <%=columnNode%>);
						 <% } %> 
			   		}
			<% }
				// Handle the mandatory column (if columns are null or string empty we ignore them)  
			   else { %>
			   
				   if(null != <%=columnNode%> <%if(isString) {%> && !<%=columnNode%>.isEmpty() <%}%> <%if(isByteArray) {%> && <%=columnNode%>.length != 0 <%}%>) {
						<% if(isDate){ %>
					 		mapValues_<%=cid%>.put(<%=name%>, FormatterUtils.format_DateInUTC(<%=columnNode%>,  <%=column.getPattern()%>));
				 		<% } else { %>
					 		mapValues_<%=cid%>.put(<%=name%>, <%=columnNode%>);
						<% } %>
				   }
				   
			<%   }
		}
 }

for(String[] isJSonEntry: isJSONList){
%>
        dbTypeJSONMap_<%=cid%>.put(<%=isJSonEntry[0]%>, <%=isJSonEntry[1]%>);
<%
}
%>

<%
	
if ("INSERT".equalsIgnoreCase(dataAction)) {

		// Add resolved Primary keys to the Item
		if(sortKey !=null && !sortKey.isEmpty() && !sortKey.equals("\"\"")) { %>	
				item_<%=cid%> = item_<%=cid%>.withPrimaryKey(<%=partitionKey%>, partitionKeyValue_<%=cid%>, 
															 <%=sortKey%>, sortKeyValue_<%=cid%>);	
		<% } else { %>
				item_<%=cid%> = item_<%=cid%>.withPrimaryKey(<%=partitionKey%>, partitionKeyValue_<%=cid%>);
		<% } %>
		
		for (java.util.Map.Entry<String, Object> entry : mapValues_<%=cid%>.entrySet()) {
			if(entry.getValue() == null){
				item_<%=cid%> = item_<%=cid%>.withNull(entry.getKey());
			}else{
			    if(dbTypeJSONMap_<%=cid%>.get(entry.getKey())){
			        item_<%=cid%> = item_<%=cid%>.withJSON(entry.getKey(), entry.getValue().toString());
			    }
			    else{
				    item_<%=cid%> = item_<%=cid%>.with(entry.getKey(), entry.getValue());
			    }
			}
		}	
		putItemSpec_<%=cid%> = new com.amazonaws.services.dynamodbv2.document.spec.PutItemSpec().withItem(item_<%=cid%>);
		table_<%=cid%>.putItem(putItemSpec_<%=cid%>);
        
		
<% } else if ("UPDATE".equalsIgnoreCase(dataAction)) {	%>

		<% if(sortKey !=null && !sortKey.isEmpty() && !sortKey.equals("\"\"")){	%>				
			updateItemSpec_<%=cid%> = updateItemSpec_<%=cid%>.withPrimaryKey(<%=partitionKey%>, partitionKeyValue_<%=cid%>,
																			 <%=sortKey%>, sortKeyValue_<%=cid%>);				
		<% } else { %>
			updateItemSpec_<%=cid%> = updateItemSpec_<%=cid%>.withPrimaryKey(<%=partitionKey%>, partitionKeyValue_<%=cid%>);
		<% } %>
		
		java.util.HashMap<String, Object> valueMap_<%=cid%> = new java.util.HashMap<String, Object>();	
		java.util.HashMap<String,String> nameMap_<%=cid%> = new java.util.HashMap<String,String>();	
		java.util.HashMap<String,String> nameMapRevert_<%=cid%> = new java.util.HashMap<String,String>();						
		
	<%	for(Map<String,String> mapping : nameMappingTable) {
			String placeholder = mapping.get("PLACEHOLDER");
			String name = mapping.get("NAME");
	%>
			nameMap_<%=cid%>.put("<%=placeholder%>", "<%=name%>");
			nameMapRevert_<%=cid%>.put("<%=name%>","<%=placeholder%>");
	<% 	} %>
		
		StringBuilder updateExpression_<%=cid%> = new StringBuilder();
		updateExpression_<%=cid%>.append("set ");
		int countValue_<%=cid%>=0;
		for (java.util.Map.Entry<String, Object> entry : mapValues_<%=cid%>.entrySet()) {
			if(countValue_<%=cid%> > 0)	{
					updateExpression_<%=cid%>.append(", ");
			}
				
			if(nameMapRevert_<%=cid%>.containsKey(entry.getKey())){
					updateExpression_<%=cid%>.append(nameMapRevert_<%=cid%>.get(entry.getKey()));
					updateExpression_<%=cid%>.append(" =:"+entry.getKey());
			}else{
					updateExpression_<%=cid%>.append(entry.getKey()+"  =:"+entry.getKey());
			}

			valueMap_<%=cid%>.put(":"+entry.getKey(), entry.getValue());
			countValue_<%=cid%>++;
		}
		
		<%	if(isLog4jEnabled) { %>	
			log.debug("update expression: "+updateExpression_<%=cid%>.toString());
			log.debug("value map: "+nameMap_<%=cid%>.toString());
			log.debug("value map: "+valueMap_<%=cid%>.toString());
		<%	} %>
		
		updateItemSpec_<%=cid%> = updateItemSpec_<%=cid%>.withUpdateExpression(updateExpression_<%=cid%>.toString())
														 .withValueMap(valueMap_<%=cid%>);	
		if(nameMap_<%=cid%>.size()>0) {
			updateItemSpec_<%=cid%> = updateItemSpec_<%=cid%>.withNameMap(nameMap_<%=cid%>);
		}
		
		table_<%=cid%>.updateItem(updateItemSpec_<%=cid%>);
		

<% } else if ("DELETE".equalsIgnoreCase(dataAction)) { 	%>
		
		<% if(sortKey !=null && !sortKey.isEmpty() && !sortKey.equals("\"\"")){	%>				
			deleteItemSpec_<%=cid%> = deleteItemSpec_<%=cid%>.withPrimaryKey(<%=partitionKey%>, partitionKeyValue_<%=cid%>, 
																			 <%=sortKey%>, sortKeyValue_<%=cid%>);				
		<% }else { %>
			deleteItemSpec_<%=cid%> = deleteItemSpec_<%=cid%>.withPrimaryKey(<%=partitionKey%>, partitionKeyValue_<%=cid%>);
		<% } %>
		
		table_<%=cid%>.deleteItem(deleteItemSpec_<%=cid%>);
<% } %>
	 
nb_line_<%=cid %> ++;
		